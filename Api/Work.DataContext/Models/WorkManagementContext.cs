// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Work.DataContext.Models;

public partial class WorkManagementContext : DbContext
{
    public WorkManagementContext(DbContextOptions<WorkManagementContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actions> Actions { get; set; }

    public virtual DbSet<AlePayTransactionInfos> AlePayTransactionInfos { get; set; }

    public virtual DbSet<Banks> Banks { get; set; }

    public virtual DbSet<BannerCategories> BannerCategories { get; set; }

    public virtual DbSet<Banners> Banners { get; set; }

    public virtual DbSet<Brands> Brands { get; set; }

    public virtual DbSet<CallTransactions> CallTransactions { get; set; }

    public virtual DbSet<Categories> Categories { get; set; }

    public virtual DbSet<ChatTopics> ChatTopics { get; set; }

    public virtual DbSet<Chats> Chats { get; set; }

    public virtual DbSet<Clients> Clients { get; set; }

    public virtual DbSet<Comments> Comments { get; set; }

    public virtual DbSet<Companys> Companys { get; set; }

    public virtual DbSet<Contents> Contents { get; set; }

    public virtual DbSet<Countries> Countries { get; set; }

    public virtual DbSet<CourseLessions> CourseLessions { get; set; }

    public virtual DbSet<Courses> Courses { get; set; }

    public virtual DbSet<Customers> Customers { get; set; }

    public virtual DbSet<DealTypes> DealTypes { get; set; }

    public virtual DbSet<DeliveryCategories> DeliveryCategories { get; set; }

    public virtual DbSet<DeliveryServices> DeliveryServices { get; set; }

    public virtual DbSet<DeliveryShops> DeliveryShops { get; set; }

    public virtual DbSet<DeliveryTags> DeliveryTags { get; set; }

    public virtual DbSet<Department> Department { get; set; }

    public virtual DbSet<Districts> Districts { get; set; }

    public virtual DbSet<Domains> Domains { get; set; }

    public virtual DbSet<Faqs> Faqs { get; set; }

    public virtual DbSet<FeedbackCategories> FeedbackCategories { get; set; }

    public virtual DbSet<FeedbackStatus> FeedbackStatus { get; set; }

    public virtual DbSet<Feedbacks> Feedbacks { get; set; }

    public virtual DbSet<Feeds> Feeds { get; set; }

    public virtual DbSet<FoodCategories> FoodCategories { get; set; }

    public virtual DbSet<FoodJoinCategories> FoodJoinCategories { get; set; }

    public virtual DbSet<FoodLikes> FoodLikes { get; set; }

    public virtual DbSet<FoodProducts> FoodProducts { get; set; }

    public virtual DbSet<Foods> Foods { get; set; }

    public virtual DbSet<Gifts> Gifts { get; set; }

    public virtual DbSet<GroupRegs> GroupRegs { get; set; }

    public virtual DbSet<Groups> Groups { get; set; }

    public virtual DbSet<HtMenu> HtMenu { get; set; }

    public virtual DbSet<HtMenuUser> HtMenuUser { get; set; }

    public virtual DbSet<InvoiceDetails> InvoiceDetails { get; set; }

    public virtual DbSet<InvoiceFiles> InvoiceFiles { get; set; }

    public virtual DbSet<InvoiceHeaderExtras> InvoiceHeaderExtras { get; set; }

    public virtual DbSet<InvoiceTaxBreakdowns> InvoiceTaxBreakdowns { get; set; }

    public virtual DbSet<InvoiceTemplates> InvoiceTemplates { get; set; }

    public virtual DbSet<Invoices> Invoices { get; set; }

    public virtual DbSet<LessionLikes> LessionLikes { get; set; }

    public virtual DbSet<LessionPathologies> LessionPathologies { get; set; }

    public virtual DbSet<LessionProducts> LessionProducts { get; set; }

    public virtual DbSet<LessionRates> LessionRates { get; set; }

    public virtual DbSet<LessonDetails> LessonDetails { get; set; }

    public virtual DbSet<Lessons> Lessons { get; set; }

    public virtual DbSet<Levels> Levels { get; set; }

    public virtual DbSet<Likes> Likes { get; set; }

    public virtual DbSet<LogSms> LogSms { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<NewsCategories> NewsCategories { get; set; }

    public virtual DbSet<NoteCourse> NoteCourse { get; set; }

    public virtual DbSet<Notifications> Notifications { get; set; }

    public virtual DbSet<OmiCallLogs> OmiCallLogs { get; set; }

    public virtual DbSet<OrderActions> OrderActions { get; set; }

    public virtual DbSet<OrderDetails> OrderDetails { get; set; }

    public virtual DbSet<OrderGifts> OrderGifts { get; set; }

    public virtual DbSet<OrderPromotionSales> OrderPromotionSales { get; set; }

    public virtual DbSet<OrderPromotionUsers> OrderPromotionUsers { get; set; }

    public virtual DbSet<OrderPromotions> OrderPromotions { get; set; }

    public virtual DbSet<OrderStatus> OrderStatus { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<PartLessions> PartLessions { get; set; }

    public virtual DbSet<Pathologies> Pathologies { get; set; }

    public virtual DbSet<PathologyCategories> PathologyCategories { get; set; }

    public virtual DbSet<Permissions> Permissions { get; set; }

    public virtual DbSet<Points> Points { get; set; }

    public virtual DbSet<Popups> Popups { get; set; }

    public virtual DbSet<ProductCategories> ProductCategories { get; set; }

    public virtual DbSet<ProductCombos> ProductCombos { get; set; }

    public virtual DbSet<ProductLogs> ProductLogs { get; set; }

    public virtual DbSet<ProductProvinces> ProductProvinces { get; set; }

    public virtual DbSet<ProductRegs> ProductRegs { get; set; }

    public virtual DbSet<Products> Products { get; set; }

    public virtual DbSet<PromotionNotIns> PromotionNotIns { get; set; }

    public virtual DbSet<PromotionProducts> PromotionProducts { get; set; }

    public virtual DbSet<PromotionSaleNotIns> PromotionSaleNotIns { get; set; }

    public virtual DbSet<PromotionSaleProducts> PromotionSaleProducts { get; set; }

    public virtual DbSet<PromotionSales> PromotionSales { get; set; }

    public virtual DbSet<PromotionSalesGiftProducts> PromotionSalesGiftProducts { get; set; }

    public virtual DbSet<PromotionSalesGiftcode> PromotionSalesGiftcode { get; set; }

    public virtual DbSet<PromotionUserLevels> PromotionUserLevels { get; set; }

    public virtual DbSet<PromotionUserNotIns> PromotionUserNotIns { get; set; }

    public virtual DbSet<PromotionUserProducts> PromotionUserProducts { get; set; }

    public virtual DbSet<PromotionUsers> PromotionUsers { get; set; }

    public virtual DbSet<PromotionUsersGiftProducts> PromotionUsersGiftProducts { get; set; }

    public virtual DbSet<PromotionUsersGiftcode> PromotionUsersGiftcode { get; set; }

    public virtual DbSet<Promotions> Promotions { get; set; }

    public virtual DbSet<Provinces> Provinces { get; set; }

    public virtual DbSet<QuestionLessions> QuestionLessions { get; set; }

    public virtual DbSet<SaleActions> SaleActions { get; set; }

    public virtual DbSet<SaleOrderActions> SaleOrderActions { get; set; }

    public virtual DbSet<SaleOrderDetails> SaleOrderDetails { get; set; }

    public virtual DbSet<SaleOrderStatus> SaleOrderStatus { get; set; }

    public virtual DbSet<SaleOrders> SaleOrders { get; set; }

    public virtual DbSet<SaleStatus> SaleStatus { get; set; }

    public virtual DbSet<SalesFlows> SalesFlows { get; set; }

    public virtual DbSet<Settings> Settings { get; set; }

    public virtual DbSet<ShipConfigs> ShipConfigs { get; set; }

    public virtual DbSet<ShippingAddress> ShippingAddress { get; set; }

    public virtual DbSet<ShippingServices> ShippingServices { get; set; }

    public virtual DbSet<ShopHistories> ShopHistories { get; set; }

    public virtual DbSet<ShopInOutDetails> ShopInOutDetails { get; set; }

    public virtual DbSet<ShopInOuts> ShopInOuts { get; set; }

    public virtual DbSet<ShopOperations> ShopOperations { get; set; }

    public virtual DbSet<ShopProducts> ShopProducts { get; set; }

    public virtual DbSet<Shops> Shops { get; set; }

    public virtual DbSet<Statements> Statements { get; set; }

    public virtual DbSet<Status> Status { get; set; }

    public virtual DbSet<Suppliers> Suppliers { get; set; }

    public virtual DbSet<SysConfigs> SysConfigs { get; set; }

    public virtual DbSet<TagMaps> TagMaps { get; set; }

    public virtual DbSet<Tags> Tags { get; set; }

    public virtual DbSet<TempTable> TempTable { get; set; }

    public virtual DbSet<Themes> Themes { get; set; }

    public virtual DbSet<TopicCategories> TopicCategories { get; set; }

    public virtual DbSet<TopicUsers> TopicUsers { get; set; }

    public virtual DbSet<UserAddress> UserAddress { get; set; }

    public virtual DbSet<UserAddressShopLocations> UserAddressShopLocations { get; set; }

    public virtual DbSet<UserWebs> UserWebs { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<Wards> Wards { get; set; }

    public virtual DbSet<WarehouseHistories> WarehouseHistories { get; set; }

    public virtual DbSet<WarehouseInOutDetails> WarehouseInOutDetails { get; set; }

    public virtual DbSet<WarehouseInOutStatus> WarehouseInOutStatus { get; set; }

    public virtual DbSet<WarehouseInOutTemps> WarehouseInOutTemps { get; set; }

    public virtual DbSet<WarehouseInOuts> WarehouseInOuts { get; set; }

    public virtual DbSet<WarehouseOperations> WarehouseOperations { get; set; }

    public virtual DbSet<WarehouseProducts> WarehouseProducts { get; set; }

    public virtual DbSet<Warehouses> Warehouses { get; set; }

    public virtual DbSet<WebhookLogs> WebhookLogs { get; set; }

    public virtual DbSet<WmActions> WmActions { get; set; }

    public virtual DbSet<WmFeedCommentLikes> WmFeedCommentLikes { get; set; }

    public virtual DbSet<WmLabels> WmLabels { get; set; }

    public virtual DbSet<WmNotes> WmNotes { get; set; }

    public virtual DbSet<WmParticipants> WmParticipants { get; set; }

    public virtual DbSet<WmProjectCols> WmProjectCols { get; set; }

    public virtual DbSet<WmProjectFiles> WmProjectFiles { get; set; }

    public virtual DbSet<WmProjectFolders> WmProjectFolders { get; set; }

    public virtual DbSet<WmProjectMembers> WmProjectMembers { get; set; }

    public virtual DbSet<WmProjects> WmProjects { get; set; }

    public virtual DbSet<WmShortCutLinks> WmShortCutLinks { get; set; }

    public virtual DbSet<WmSprints> WmSprints { get; set; }

    public virtual DbSet<WmTaskCommentLikes> WmTaskCommentLikes { get; set; }

    public virtual DbSet<WmTaskComments> WmTaskComments { get; set; }

    public virtual DbSet<WmTaskLogs> WmTaskLogs { get; set; }

    public virtual DbSet<WmTasks> WmTasks { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actions>(entity =>
        {
            entity.Property(e => e.Actions1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước")
                .HasColumnName("Actions");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Roles).HasMaxLength(200);
            entity.Property(e => e.StatusActions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AlePayTransactionInfos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AlePayTransactionInfo");

            entity.Property(e => e.Amount).HasMaxLength(500);
            entity.Property(e => e.BankCode).HasMaxLength(500);
            entity.Property(e => e.BankHotline).HasMaxLength(500);
            entity.Property(e => e.BankName).HasMaxLength(500);
            entity.Property(e => e.BuyerEmail).HasMaxLength(500);
            entity.Property(e => e.BuyerName).HasMaxLength(500);
            entity.Property(e => e.BuyerPhone).HasMaxLength(500);
            entity.Property(e => e.CardNumber).HasMaxLength(500);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Currency).HasMaxLength(500);
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IpCallIpn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IpCallIPN");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Message).HasMaxLength(500);
            entity.Property(e => e.Method).HasMaxLength(500);
            entity.Property(e => e.NameMtid).HasMaxLength(500);
            entity.Property(e => e.OrderCode).HasMaxLength(500);
            entity.Property(e => e.Reason).HasMaxLength(500);
            entity.Property(e => e.Status).HasMaxLength(500);
            entity.Property(e => e.SubMtid).HasMaxLength(500);
            entity.Property(e => e.SuccessTime).HasMaxLength(500);
            entity.Property(e => e.TransactionCode).HasMaxLength(500);
            entity.Property(e => e.TransactionTime).HasMaxLength(500);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Banks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WithdrawalRequest");

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Mã");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(false)
                .HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsSupportAtm)
                .HasDefaultValue(false)
                .HasComment("Hỗ trợ rút tiền qua thẻ ATM");
            entity.Property(e => e.IsSupportBank)
                .HasDefaultValue(false)
                .HasComment("Hỗ trợ rút tiền qua số tài khoản");
            entity.Property(e => e.IsSupportPayment).HasDefaultValue(false);
            entity.Property(e => e.LogoLink)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BannerCategories>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Banners>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.IdCategory).HasComment("");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.ImageWeb)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.ObjectId).HasComment("Id tham chiếu");
            entity.Property(e => e.ShowUserType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Hiển thị theo loại khách hàng");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .HasComment("Link");

            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.Banners)
                .HasForeignKey(d => d.IdCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Banners_BannerCategories");
        });

        modelBuilder.Entity<Brands>(entity =>
        {
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdCountry).HasComment("Xuất xứ");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Logo");
            entity.Property(e => e.ImageAbouts)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ImageBanner)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ListImages).HasMaxLength(500);
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.Sort).HasComment("Thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Video).HasMaxLength(300);

            entity.HasOne(d => d.IdCountryNavigation).WithMany(p => p.Brands)
                .HasForeignKey(d => d.IdCountry)
                .HasConstraintName("FK_Brands_Countries");
        });

        modelBuilder.Entity<CallTransactions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CallTran__3214EC07E9C2AC53");

            entity.Property(e => e.AutocallUuid).HasMaxLength(500);
            entity.Property(e => e.BillSec).HasMaxLength(500);
            entity.Property(e => e.BillSecForwardOut).HasMaxLength(500);
            entity.Property(e => e.CallUuid).HasMaxLength(500);
            entity.Property(e => e.CreateByAvatar).HasMaxLength(500);
            entity.Property(e => e.CreateByContactId).HasMaxLength(500);
            entity.Property(e => e.CreateByGender).HasMaxLength(500);
            entity.Property(e => e.CreateById).HasMaxLength(500);
            entity.Property(e => e.CreateByName).HasMaxLength(500);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDateOmi).HasMaxLength(500);
            entity.Property(e => e.CustomerFullName).HasMaxLength(500);
            entity.Property(e => e.CustomerFullNameUnsigned).HasMaxLength(500);
            entity.Property(e => e.DestinationNumber).HasMaxLength(50);
            entity.Property(e => e.Direction).HasMaxLength(500);
            entity.Property(e => e.Disposition).HasMaxLength(500);
            entity.Property(e => e.EndbyName).HasMaxLength(500);
            entity.Property(e => e.FromNumber).HasMaxLength(500);
            entity.Property(e => e.Hotline).HasMaxLength(500);
            entity.Property(e => e.InviteFailureStatus).HasMaxLength(500);
            entity.Property(e => e.IsAutoCall).HasDefaultValue(false);
            entity.Property(e => e.IsHaveForwardOut).HasDefaultValue(false);
            entity.Property(e => e.IsVoicemail).HasDefaultValue(false);
            entity.Property(e => e.Ivr).HasMaxLength(500);
            entity.Property(e => e.LastUpdatedDateOmi).HasMaxLength(500);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.PhoneNumber).HasMaxLength(500);
            entity.Property(e => e.Provider).HasMaxLength(500);
            entity.Property(e => e.RecordSeconds).HasMaxLength(500);
            entity.Property(e => e.RecordingData).HasMaxLength(500);
            entity.Property(e => e.RecordingFile).HasMaxLength(500);
            entity.Property(e => e.RecordingFileVoicemail).HasMaxLength(500);
            entity.Property(e => e.SipNumber).HasMaxLength(500);
            entity.Property(e => e.SourceNumber).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(500);
            entity.Property(e => e.TenantId).HasMaxLength(500);
            entity.Property(e => e.TimeStartToAnswer).HasMaxLength(500);
            entity.Property(e => e.ToNumber).HasMaxLength(500);
            entity.Property(e => e.TransactionId).HasMaxLength(500);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserDataStr).HasMaxLength(500);
        });

        modelBuilder.Entity<Categories>(entity =>
        {
            entity.Property(e => e.Avatar)
                .HasMaxLength(100)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DescriptionSeo)
                .HasMaxLength(250)
                .HasColumnName("DescriptionSEO");
            entity.Property(e => e.DetailFooterSeo).HasColumnName("DetailFooterSEO");
            entity.Property(e => e.DetailHeaderSeo).HasColumnName("DetailHeaderSEO");
            entity.Property(e => e.Icon).HasMaxLength(50);
            entity.Property(e => e.IdParent).HasDefaultValue(0);
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrivate).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ShowUserType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Hiển thị theo loại khách hàng");
            entity.Property(e => e.TitleSeo)
                .HasMaxLength(250)
                .HasColumnName("TitleSEO");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ChatTopics>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasComment("Khách hàng");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActived).HasComment("Trạng thái đơn hàng hiện tại");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .HasComment("Nội dung phản hồi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Chats>(entity =>
        {
            entity.Property(e => e.ChatTopicId).HasComment("Cuộc trò truyện");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasComment("Khách hàng");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái");
            entity.Property(e => e.Images)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Ảnh");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsReaded).HasDefaultValue(false);
            entity.Property(e => e.Message).HasComment("Nội dung phản hồi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.ChatTopic).WithMany(p => p.Chats)
                .HasForeignKey(d => d.ChatTopicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Chats_ChatTopics");
        });

        modelBuilder.Entity<Clients>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PZ_Clients");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Avatar)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả, thông tin doanh nghiệp");
            entity.Property(e => e.DescriptionCart).HasComment("Mô tả, hiển thị ở giỏ hàng");
            entity.Property(e => e.DescriptionShip).HasComment("Mô tả, thông tin cho Ship biết ở đơn hàng giao vận");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExtendDateOrder).HasComment("Cho phép đặt hàng sau x ngày");
            entity.Property(e => e.FacebookId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FeeBussiness).HasComment("Phí doanh nghiệp phải trả cho sàn");
            entity.Property(e => e.IdDeliveryUnit).HasComment("Đơn vị giao hàng mặc định");
            entity.Property(e => e.IdTranport)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ImageAbouts)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ImageBanner)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.IsActived).HasDefaultValue(true);
            entity.Property(e => e.IsAutoShip).HasComment("Có tác nghiệp ship tự động trên hệ thống hay ko");
            entity.Property(e => e.IsCheckInventory).HasComment("Kiểm tra hàng tồn kho trong cửa hàng");
            entity.Property(e => e.IsConnectLogistics).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsSendSms).HasDefaultValue(false);
            entity.Property(e => e.LogisticsServices).HasMaxLength(50);
            entity.Property(e => e.LogisticsUsername).HasMaxLength(20);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShipDistance).HasComment("Khoảng cách giao hàng từ cửa hàng ( Nếu Thiết lập IsAutoShip = 1)");
            entity.Property(e => e.ShipLocation).HasComment("Khoảng cách vị trí ước tính ( Nếu Thiết lập IsAutoShip = 1)");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Comments>(entity =>
        {
            entity.Property(e => e.Attachment).HasMaxLength(150);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdFeed).HasComment("Mã sản phẩm");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("CTV");

            entity.HasOne(d => d.IdFeedNavigation).WithMany(p => p.Comments)
                .HasForeignKey(d => d.IdFeed)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_Feeds");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_Users");
        });

        modelBuilder.Entity<Companys>(entity =>
        {
            entity.Property(e => e.AdressLine).HasMaxLength(500);
            entity.Property(e => e.BankAccount)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.BankName).HasMaxLength(200);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FullName).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LegalName).HasMaxLength(200);
            entity.Property(e => e.PasswordInvoice)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaxCode)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserNameInvoice)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Contents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SourceContents");

            entity.Property(e => e.Comment)
                .HasMaxLength(300)
                .HasComment("Comment khi không được duyệt");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Images)
                .IsUnicode(false)
                .HasComment("Mô tả");
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Status)
                .HasDefaultValue(0)
                .HasComment("1. private, 2. Chờ duyệt, 3: đã duyệt, 4: không được duyệt");
            entity.Property(e => e.Type)
                .HasDefaultValue(0)
                .HasComment("1: doanh nghiệp tạo. 2: cá nhân tạo");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.Contents)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contents_Products");
        });

        modelBuilder.Entity<Countries>(entity =>
        {
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Logo");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.Sort).HasDefaultValue(1);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CourseLessions>(entity =>
        {
            entity.HasOne(d => d.IdCourseNavigation).WithMany(p => p.CourseLessions)
                .HasForeignKey(d => d.IdCourse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CourseLessions_Courses");

            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.CourseLessions)
                .HasForeignKey(d => d.IdLession)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CourseLessions_Lessons");
        });

        modelBuilder.Entity<Courses>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("");
            entity.Property(e => e.ShowUserType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Customers>(entity =>
        {
            entity.Property(e => e.Id).HasComment("1: CTV, 2: DN,");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Avatar)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Balance).HasDefaultValue(0.0);
            entity.Property(e => e.BankBranch)
                .HasMaxLength(100)
                .HasComment("Chi nhánh");
            entity.Property(e => e.BankCardNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản");
            entity.Property(e => e.BankFullName)
                .HasMaxLength(200)
                .HasComment("Họ và tên");
            entity.Property(e => e.BankNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản");
            entity.Property(e => e.CashInTransit)
                .HasDefaultValue(0.0)
                .HasComment("Tiền đang luôn chuyển");
            entity.Property(e => e.Cmt).HasMaxLength(20);
            entity.Property(e => e.CmtBackside).HasMaxLength(150);
            entity.Property(e => e.CmtFront).HasMaxLength(150);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Domain)
                .HasMaxLength(150)
                .HasComment("Tên miền");
            entity.Property(e => e.DomainStatus).HasComment("2: Đã thành công, 1: đang xử lý");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FacebookId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FacebookName).HasMaxLength(150);
            entity.Property(e => e.IdBank).HasComment("");
            entity.Property(e => e.IdParent).HasComment("Id cha");
            entity.Property(e => e.IdSupport)
                .HasDefaultValue(0)
                .HasComment("Người hỗ trợ");
            entity.Property(e => e.IdType).HasComment("1.CTV, 2. DN, 3 Shop");
            entity.Property(e => e.IsAdminClient)
                .HasDefaultValue(false)
                .HasComment("Là tài khoản doanh nghiệp");
            entity.Property(e => e.IsApproveCmt)
                .HasDefaultValue(false)
                .HasComment("Duyệt cmt");
            entity.Property(e => e.IsApproved)
                .HasDefaultValue(false)
                .HasComment("Duyệt tài khoản");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsKol).HasColumnName("IsKOL");
            entity.Property(e => e.IsLocked)
                .HasDefaultValue(false)
                .HasComment("Bắt logout đăng nhập lại");
            entity.Property(e => e.IsLogout)
                .HasDefaultValue(false)
                .HasComment("Bắt logout đăng nhập lại");
            entity.Property(e => e.IsOmiCall).HasDefaultValue(false);
            entity.Property(e => e.IsTrial).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OmiCallDomain)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.OmiCallPassword).HasMaxLength(100);
            entity.Property(e => e.OmiCallRole).HasMaxLength(150);
            entity.Property(e => e.OmiCallSecretKey)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Protocol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tên miền");
            entity.Property(e => e.ReferralCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Mã giới thiệu");
            entity.Property(e => e.ReferralUserId).HasComment("Người giới thiệu");
            entity.Property(e => e.RequestCancelDate).HasColumnType("datetime");
            entity.Property(e => e.TotalReward)
                .HasDefaultValue(0.0)
                .HasComment("Tổng thưởng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("1: CTV, 2: DN,");
            entity.Property(e => e.UserName).HasMaxLength(150);

            entity.HasOne(d => d.User).WithMany(p => p.Customers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Customers_Users");
        });

        modelBuilder.Entity<DealTypes>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DeliveryCategories>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Danh mục đơn vị vận chuyển"));

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.EndPoint).HasMaxLength(300);
            entity.Property(e => e.IsActived).HasDefaultValue(true);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DeliveryServices>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdClient).HasComment("Id doanh nghiệp");
            entity.Property(e => e.IdDeliveryCategory).HasComment("nhà cung cấp dịch vụ vẫn chuyển");
            entity.Property(e => e.IsActived).HasDefaultValue(true);
            entity.Property(e => e.Name).HasMaxLength(300);
            entity.Property(e => e.Token)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasComment("Token sử dụng dịch vụ vận chuyển");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.DeliveryServices)
                .HasForeignKey(d => d.IdClient)
                .HasConstraintName("FK_DeliveryServices_Clients");
        });

        modelBuilder.Entity<DeliveryShops>(entity =>
        {
            entity.HasOne(d => d.IdDeliveryServicesNavigation).WithMany(p => p.DeliveryShops)
                .HasForeignKey(d => d.IdDeliveryServices)
                .HasConstraintName("FK_DeliveryShops_DeliveryServices");

            entity.HasOne(d => d.IdShopsNavigation).WithMany(p => p.DeliveryShops)
                .HasForeignKey(d => d.IdShops)
                .HasConstraintName("FK_DeliveryShops_Shops");
        });

        modelBuilder.Entity<DeliveryTags>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Nhãn đơn hàng"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Detail).HasMaxLength(500);
            entity.Property(e => e.IsActived).HasDefaultValue(true);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Districts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DM_QuanHuyen");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProvinceNavigation).WithMany(p => p.Districts)
                .HasForeignKey(d => d.IdProvince)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Districts_Provinces");
        });

        modelBuilder.Entity<Domains>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Type).HasComment("Loại");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Faqs>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Type).HasComment("1. Hướng dẫn bán hàng, 2. Hướng dẫn sử dụng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UrlVideo)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Video");
        });

        modelBuilder.Entity<FeedbackCategories>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActived).HasComment("Trạng thái đơn hàng hiện tại");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasComment("Nội dung phản hồi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FeedbackStatus>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActived).HasComment("Trạng thái đơn hàng hiện tại");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasComment("Nội dung phản hồi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Feedbacks>(entity =>
        {
            entity.Property(e => e.Content)
                .HasMaxLength(1000)
                .HasComment("Nội dung phản hồi");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdFeedbackStatus).HasComment("Trạng thái trả lời");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái đơn hàng hiện tại");
            entity.Property(e => e.Images)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Ảnh");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasComment("Ghi chú");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdFeedbackCategorieNavigation).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.IdFeedbackCategorie)
                .HasConstraintName("FK_Feedbacks_FeedbackCategories");

            entity.HasOne(d => d.IdFeedbackStatusNavigation).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.IdFeedbackStatus)
                .HasConstraintName("FK_Feedbacks_FeedbackStatus");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.IdOrder)
                .HasConstraintName("FK_Feedbacks_Orders");
        });

        modelBuilder.Entity<Feeds>(entity =>
        {
            entity.Property(e => e.Comment).HasComment("Lượt Comment");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdProduct).HasComment("Mã sản phẩm");
            entity.Property(e => e.ImageLink).HasMaxLength(500);
            entity.Property(e => e.Images)
                .HasMaxLength(500)
                .HasComment("Ảnh");
            entity.Property(e => e.IsActived).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Like).HasComment("Lượt like");
            entity.Property(e => e.Pin)
                .HasDefaultValue(false)
                .HasComment("Ghim lên đầu");
            entity.Property(e => e.Sort).HasComment("Sắp xếp");
            entity.Property(e => e.TitleLink).HasMaxLength(200);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UrlLink)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.UserId).HasComment("CTV");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.Feeds)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_Feeds_Products");

            entity.HasOne(d => d.User).WithMany(p => p.Feeds)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feeds_Users");
        });

        modelBuilder.Entity<FoodCategories>(entity =>
        {
            entity.Property(e => e.Avatar)
                .HasMaxLength(100)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdParent).HasDefaultValue(0);
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrivate).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FoodJoinCategories>(entity =>
        {
            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.FoodJoinCategories)
                .HasForeignKey(d => d.IdCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FoodJoinCategories_FoodCategories");

            entity.HasOne(d => d.IdFoodNavigation).WithMany(p => p.FoodJoinCategories)
                .HasForeignKey(d => d.IdFood)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FoodJoinCategories_Foods");
        });

        modelBuilder.Entity<FoodLikes>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);

            entity.HasOne(d => d.IdFoodNavigation).WithMany(p => p.FoodLikes)
                .HasForeignKey(d => d.IdFood)
                .HasConstraintName("FK_FoodLikes_Foods");

            entity.HasOne(d => d.User).WithMany(p => p.FoodLikes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_FoodLikes_Users");
        });

        modelBuilder.Entity<FoodProducts>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdFoodNavigation).WithMany(p => p.FoodProducts)
                .HasForeignKey(d => d.IdFood)
                .HasConstraintName("FK_FoodProducts_Foods");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.FoodProducts)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_FoodProducts_Products");
        });

        modelBuilder.Entity<Foods>(entity =>
        {
            entity.Property(e => e.Banner)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.ShowFromDate).HasColumnType("datetime");
            entity.Property(e => e.ShowToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Gifts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Vouchers");

            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.Type).HasComment("Loại 1 freeship, 2: mã giảm giá");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<GroupRegs>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdGroup).HasComment("Nhóm");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Status).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: CTV hủy, 3 Leader từ chối, 4: Leader mời vào nhóm, 5: CTV từ chối lời mời, 6: Leader xóa lời mời");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("");

            entity.HasOne(d => d.IdGroupNavigation).WithMany(p => p.GroupRegs)
                .HasForeignKey(d => d.IdGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupRegs_Groups");

            entity.HasOne(d => d.User).WithMany(p => p.GroupRegs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupRegs_Users");
        });

        modelBuilder.Entity<Groups>(entity =>
        {
            entity.Property(e => e.Avatar)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasComment("Mã nhóm");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("");
            entity.Property(e => e.IsActiveReward)
                .HasDefaultValue(true)
                .HasComment("Được nhận thưởng");
            entity.Property(e => e.IsAutoApproved)
                .HasDefaultValue(true)
                .HasComment("Tự động duyệt");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrivate)
                .HasDefaultValue(false)
                .HasComment("Nhóm kín");
            entity.Property(e => e.Link)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Link nhóm");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("Trưởng nhóm");
        });

        modelBuilder.Entity<HtMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_tbl_DM_HeThong_Menu");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Icon).HasMaxLength(50);
            entity.Property(e => e.IdDuongDan).HasMaxLength(4000);
            entity.Property(e => e.Ma).HasMaxLength(50);
            entity.Property(e => e.Modified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Ten).HasMaxLength(500);
            entity.Property(e => e.TenDuongDan).HasMaxLength(4000);
            entity.Property(e => e.Url)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HtMenuUser>(entity =>
        {
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Modified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Menu).WithMany(p => p.HtMenuUser)
                .HasForeignKey(d => d.MenuId)
                .HasConstraintName("FK_HtMenuUser_HtMenu");
        });

        modelBuilder.Entity<InvoiceDetails>(entity =>
        {
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DiscountAmountBeforeTax)
                .HasComment("Tác nghiệp trước")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DiscountPercentBeforeTax)
                .HasComment("Tác nghiệp trước")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.IdVninvoiceDetail).HasColumnName("IdVNInvoiceDetail");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.PaymentAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ProductCode).HasMaxLength(200);
            entity.Property(e => e.ProductId).HasMaxLength(200);
            entity.Property(e => e.ProductName).HasMaxLength(500);
            entity.Property(e => e.UnitId).HasMaxLength(50);
            entity.Property(e => e.UnitName).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.IdInvoiceNavigation).WithMany(p => p.InvoiceDetails)
                .HasForeignKey(d => d.IdInvoice)
                .HasConstraintName("FK_InvoiceDetails_Invoices");
        });

        modelBuilder.Entity<InvoiceFiles>(entity =>
        {
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DataFile).HasComment("Tác nghiệp trước");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.ErpId).HasMaxLength(100);
            entity.Property(e => e.FileType).HasDefaultValue(0);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdInvoiceNavigation).WithMany(p => p.InvoiceFiles)
                .HasForeignKey(d => d.IdInvoice)
                .HasConstraintName("FK_InvoiceFiles_Invoices");
        });

        modelBuilder.Entity<InvoiceHeaderExtras>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.FieldName)
                .HasMaxLength(200)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.FieldValue).HasMaxLength(200);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InvoiceTaxBreakdowns>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdVninvoiceTaxBreakdown).HasColumnName("IdVNInvoiceTaxBreakdown");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.StatusActions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.VatAmount)
                .HasComment("Tác nghiệp trước")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.VatAmountBackUp).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.VatPercent).HasDefaultValue(0);

            entity.HasOne(d => d.IdInvoiceNavigation).WithMany(p => p.InvoiceTaxBreakdowns)
                .HasForeignKey(d => d.IdInvoice)
                .HasConstraintName("FK_InvoiceTaxBreakdowns_Invoices");
        });

        modelBuilder.Entity<InvoiceTemplates>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(200)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.TemplateNo).HasComment("Tác nghiệp trước");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdCompanyNavigation).WithMany(p => p.InvoiceTemplates)
                .HasForeignKey(d => d.IdCompany)
                .HasConstraintName("FK_InvoiceTemplates_Companys");
        });

        modelBuilder.Entity<Invoices>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BuyerAddressLine).HasMaxLength(500);
            entity.Property(e => e.BuyerBankAccount).HasMaxLength(200);
            entity.Property(e => e.BuyerBankName).HasMaxLength(200);
            entity.Property(e => e.BuyerCityName).HasMaxLength(200);
            entity.Property(e => e.BuyerCode).HasMaxLength(200);
            entity.Property(e => e.BuyerCountryCode).HasMaxLength(200);
            entity.Property(e => e.BuyerDistrictName).HasMaxLength(200);
            entity.Property(e => e.BuyerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BuyerFaxNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BuyerFullName).HasMaxLength(200);
            entity.Property(e => e.BuyerId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BuyerIdErp)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BuyerLegalName).HasMaxLength(200);
            entity.Property(e => e.BuyerPhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BuyerTaxCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Content).HasMaxLength(200);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatorErp)
                .HasMaxLength(200)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.Currency).HasMaxLength(10);
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentNo).HasMaxLength(200);
            entity.Property(e => e.DocumentReason).HasMaxLength(200);
            entity.Property(e => e.ErpId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FileDocumentId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNameOfDocument).HasMaxLength(200);
            entity.Property(e => e.FromCurrency).HasMaxLength(100);
            entity.Property(e => e.FullNamePrinter).HasMaxLength(200);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(200);
            entity.Property(e => e.InvoiceReferenceId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateId).HasDefaultValue(0);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.PaymentAmountWords).HasMaxLength(200);
            entity.Property(e => e.PaymentAmountWordsEn).HasMaxLength(200);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(200);
            entity.Property(e => e.PrintedId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrintedTime).HasColumnType("datetime");
            entity.Property(e => e.SellerAddressLine).HasMaxLength(500);
            entity.Property(e => e.SellerBankAccount).HasMaxLength(200);
            entity.Property(e => e.SellerBankName).HasMaxLength(200);
            entity.Property(e => e.SellerCityName).HasMaxLength(200);
            entity.Property(e => e.SellerCountryCode).HasMaxLength(200);
            entity.Property(e => e.SellerDistrictName).HasMaxLength(200);
            entity.Property(e => e.SellerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerFaxNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerFullName).HasMaxLength(500);
            entity.Property(e => e.SellerFullNameSigned).HasMaxLength(200);
            entity.Property(e => e.SellerId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerLegalName).HasMaxLength(200);
            entity.Property(e => e.SellerPhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerSignedId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerSignedTime).HasColumnType("datetime");
            entity.Property(e => e.SellerTaxCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo).HasMaxLength(200);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalPaymentAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalVatAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TransactionData).HasMaxLength(500);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(200)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LessionLikes>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.LessionLikes)
                .HasForeignKey(d => d.IdLession)
                .HasConstraintName("FK_LessionLikes_Lessons");

            entity.HasOne(d => d.User).WithMany(p => p.LessionLikes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_LessionLikes_Users");
        });

        modelBuilder.Entity<LessionPathologies>(entity =>
        {
            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.LessionPathologies)
                .HasForeignKey(d => d.IdLession)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LessionPathologies_Lessons");

            entity.HasOne(d => d.IdPathologyNavigation).WithMany(p => p.LessionPathologies)
                .HasForeignKey(d => d.IdPathology)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LessionPathologies_Pathologies");
        });

        modelBuilder.Entity<LessionProducts>(entity =>
        {
            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.LessionProducts)
                .HasForeignKey(d => d.IdLession)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LessionProducts_Lessons");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.LessionProducts)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LessionProducts_Products");
        });

        modelBuilder.Entity<LessionRates>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Đánh giá bài giảng"));

            entity.Property(e => e.Comment)
                .HasMaxLength(500)
                .HasComment("nội dung câu hỏi, trả lời");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdLession).HasComment("Bài giảng");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Rating).HasComment("Tóm tắt");
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.LessionRates)
                .HasForeignKey(d => d.IdLession)
                .HasConstraintName("FK_LessionRates_Lessons");
        });

        modelBuilder.Entity<LessonDetails>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DisplayLesson).HasComment("thứ tự hiện thị");
            entity.Property(e => e.ImageLessionDetail).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LessonVideo).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.LessonDetails)
                .HasForeignKey(d => d.IdLession)
                .HasConstraintName("FK_LessonDetails_Lessons1");

            entity.HasOne(d => d.IdPartLessionNavigation).WithMany(p => p.LessonDetails)
                .HasForeignKey(d => d.IdPartLession)
                .HasConstraintName("FK_LessonDetails_PartLessions");
        });

        modelBuilder.Entity<Lessons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Lessons_1");

            entity.ToTable(tb => tb.HasComment("Bài giảng"));

            entity.Property(e => e.Achievements).HasComment("Những gì bạn sẽ học");
            entity.Property(e => e.Certificate)
                .HasMaxLength(100)
                .HasComment("Loại chứng nhận khi hoàn thành");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DifficultyLevel)
                .HasMaxLength(50)
                .HasComment("Cấp độ, độ khó khóa học");
            entity.Property(e => e.Image).HasMaxLength(500);
            entity.Property(e => e.Institution)
                .HasMaxLength(300)
                .HasComment("Tổ chức");
            entity.Property(e => e.Instructor)
                .HasMaxLength(300)
                .HasComment("giảng viên, người hướng dẫn");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsShowHome).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Objects)
                .HasMaxLength(500)
                .HasComment("Đối tượng tham gia khóa học");
            entity.Property(e => e.Prerequisites)
                .HasMaxLength(500)
                .HasComment("Yêu cầu khóa học");
            entity.Property(e => e.ShowUserType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.SumRate)
                .HasDefaultValue(0.0)
                .HasComment("Tổng số sao đánh giá");
            entity.Property(e => e.Syllabus)
                .HasMaxLength(500)
                .HasComment("Giáo trình học");
            entity.Property(e => e.TotalComment)
                .HasDefaultValue(0)
                .HasComment("Tổng số lượt bình luận");
            entity.Property(e => e.TotalLesson)
                .HasDefaultValue(0)
                .HasComment("Tổng số bài giảng");
            entity.Property(e => e.TotalLike)
                .HasDefaultValue(0)
                .HasComment("Tổng số lượt thích");
            entity.Property(e => e.TotalPart)
                .HasDefaultValue(0)
                .HasComment("Tổng số phần học trong khóa học");
            entity.Property(e => e.TotalTimeVideo)
                .HasDefaultValue(0.0)
                .HasComment("Tổng thời gian của khóa học");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Levels>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .HasComment("Link");
        });

        modelBuilder.Entity<Likes>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdFeed).HasComment("Mã sản phẩm");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("CTV");

            entity.HasOne(d => d.IdFeedNavigation).WithMany(p => p.Likes)
                .HasForeignKey(d => d.IdFeed)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Likes_Feeds");
        });

        modelBuilder.Entity<LogSms>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasComment("Mã OTP");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả");
            entity.Property(e => e.Error).HasComment("Lỗi nhà mạng trả về");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("");
            entity.Property(e => e.StatusCode).HasComment("Trạng thái nhà mạng trả về");
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .HasComment("Trạng thái nhà mạng trả về");
            entity.Property(e => e.Type)
                .HasDefaultValue(1)
                .HasComment("1: Rút tiền, 2: Đăng ký tài khoản, 3: Quên mật khẩu");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("");
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DescriptionSeo)
                .HasMaxLength(250)
                .HasColumnName("DescriptionSEO");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.TitleSeo)
                .HasMaxLength(250)
                .HasColumnName("TitleSEO");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.News)
                .HasForeignKey(d => d.IdCategory)
                .HasConstraintName("FK_News_NewsCategories");
        });

        modelBuilder.Entity<NewsCategories>(entity =>
        {
            entity.Property(e => e.Avatar)
                .HasMaxLength(100)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DescriptionSeo)
                .HasMaxLength(250)
                .HasColumnName("DescriptionSEO");
            entity.Property(e => e.DetailFooterSeo).HasColumnName("DetailFooterSEO");
            entity.Property(e => e.DetailHeaderSeo).HasColumnName("DetailHeaderSEO");
            entity.Property(e => e.Icon).HasMaxLength(50);
            entity.Property(e => e.IdParent).HasDefaultValue(0);
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrivate).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.TitleSeo)
                .HasMaxLength(250)
                .HasColumnName("TitleSEO");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<NoteCourse>(entity =>
        {
            entity.Property(e => e.ContentNote)
                .HasMaxLength(500)
                .HasComment("Nội dung note");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdLesson).HasComment("Khóa học");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdLessonNavigation).WithMany(p => p.NoteCourse)
                .HasForeignKey(d => d.IdLesson)
                .HasConstraintName("FK_NoteCourse_LessonDetails");
        });

        modelBuilder.Entity<Notifications>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Mã");
            entity.Property(e => e.Content)
                .HasMaxLength(2000)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(1000)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(false)
                .HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsSent)
                .HasDefaultValue(false)
                .HasComment("");
            entity.Property(e => e.Link)
                .HasMaxLength(1000)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.SendTo).IsUnicode(false);
            entity.Property(e => e.SentDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<OmiCallLogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OmiCallL__3214EC0756D9889B");

            entity.Property(e => e.AnswerTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Direction).HasMaxLength(500);
            entity.Property(e => e.DirectionTxt).HasMaxLength(500);
            entity.Property(e => e.DurationTxt).HasMaxLength(50);
            entity.Property(e => e.EndCause).HasMaxLength(500);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.IsAccepted).HasDefaultValue(false);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.RemoteAvatar).HasMaxLength(500);
            entity.Property(e => e.RemoteName).HasMaxLength(500);
            entity.Property(e => e.RemoteNumber).HasMaxLength(500);
            entity.Property(e => e.RingingTxt).HasMaxLength(500);
            entity.Property(e => e.SipDomain).HasMaxLength(500);
            entity.Property(e => e.SipNumber).HasMaxLength(500);
            entity.Property(e => e.SneakyType).HasMaxLength(500);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StartTimeTxt).HasMaxLength(500);
            entity.Property(e => e.Status).HasMaxLength(500);
            entity.Property(e => e.StatusTxt).HasMaxLength(500);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Uuid).HasMaxLength(500);
        });

        modelBuilder.Entity<OrderActions>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdAction).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IdOrder).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái đơn hàng tương ứng");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdActionNavigation).WithMany(p => p.OrderActions)
                .HasForeignKey(d => d.IdAction)
                .HasConstraintName("FK_OrderActions_Actions");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.OrderActions)
                .HasForeignKey(d => d.IdOrder)
                .HasConstraintName("FK_OrderActions_Orders");

            entity.HasOne(d => d.IdShopNavigation).WithMany(p => p.OrderActions)
                .HasForeignKey(d => d.IdShop)
                .HasConstraintName("FK_OrderActions_Shops");
        });

        modelBuilder.Entity<OrderDetails>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ContactProducts");

            entity.Property(e => e.Comment).HasMaxLength(1000);
            entity.Property(e => e.CommentImages).HasMaxLength(1000);
            entity.Property(e => e.DateRating).HasColumnType("datetime");
            entity.Property(e => e.DiscountShop).HasComment("Chiết khấu cho cửa hàng");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái đơn hàng hiện tại");
            entity.Property(e => e.Level).HasComment("Level tại thời diểm lên đơn của ctv");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasComment("Ghi chú");
            entity.Property(e => e.Points).HasComment("Tích lũy sản phẩm");
            entity.Property(e => e.Price).HasComment("Giá bán tại thời điểm");
            entity.Property(e => e.Reward).HasComment("Tiền thưởng");
            entity.Property(e => e.RewardReferencer).HasComment("Thưởng người giới thiệu");
            entity.Property(e => e.TotalSale).HasComment("Doanh số tại thời điểm lên đơn của CTV");
            entity.Property(e => e.UserRating).HasMaxLength(50);

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.IdOrder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_Orders");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_Products");

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.IdPromotionUser)
                .HasConstraintName("FK_OrderDetails_PromotionUsers");
        });

        modelBuilder.Entity<OrderGifts>(entity =>
        {
            entity.Property(e => e.IdGift).HasComment("Mã quà tặng");
            entity.Property(e => e.Type).HasComment("Loại 1 freeship, 2: mã giảm giá, 3 sản phẩm");
            entity.Property(e => e.Value).HasComment("Số điểm");

            entity.HasOne(d => d.IdGiftNavigation).WithMany(p => p.OrderGifts)
                .HasForeignKey(d => d.IdGift)
                .HasConstraintName("FK_OrderGifts_Gifts");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.OrderGifts)
                .HasForeignKey(d => d.IdOrder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderGifts_Orders");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.OrderGifts)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_OrderGifts_Products");
        });

        modelBuilder.Entity<OrderPromotionSales>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdOrderSale).HasComment("");
            entity.Property(e => e.IdProduct).HasComment("");
            entity.Property(e => e.IdPromotionSale).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Mode).HasComment("1 = % , 2 = điểm");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderSaleNavigation).WithMany(p => p.OrderPromotionSales)
                .HasForeignKey(d => d.IdOrderSale)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPromotionSales_SaleOrders");

            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.OrderPromotionSales)
                .HasForeignKey(d => d.IdPromotionSale)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPromotionSales_PromotionSales");
        });

        modelBuilder.Entity<OrderPromotionUsers>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdOrder).HasComment("");
            entity.Property(e => e.IdProduct).HasComment("");
            entity.Property(e => e.IdPromotionUser).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Mode).HasComment("1 = % , 2 = điểm");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.OrderPromotionUsers)
                .HasForeignKey(d => d.IdOrder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPromotionUsers_Orders");

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.OrderPromotionUsers)
                .HasForeignKey(d => d.IdPromotionUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPromotionUsers_Promotions");
        });

        modelBuilder.Entity<OrderPromotions>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdOrder).HasComment("");
            entity.Property(e => e.IdProduct).HasComment("");
            entity.Property(e => e.IdPromotion).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Mode).HasComment("1 = % , 2 = điểm");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.OrderPromotions)
                .HasForeignKey(d => d.IdOrder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPromotions_Orders");

            entity.HasOne(d => d.IdPromotionNavigation).WithMany(p => p.OrderPromotions)
                .HasForeignKey(d => d.IdPromotion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPromotions_Promotions");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_OrderStatus_1");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdOrder).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.OrderStatus)
                .HasForeignKey(d => d.IdOrder)
                .HasConstraintName("FK_OrderStatus_Orders");

            entity.HasOne(d => d.IdStatusNavigation).WithMany(p => p.OrderStatus)
                .HasForeignKey(d => d.IdStatus)
                .HasConstraintName("FK_OrderStatus_Status");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PZ_Pubs_Contact");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasComment("Mã đơn");
            entity.Property(e => e.CodeShip)
                .HasMaxLength(50)
                .HasComment("Mã đơn giao vận");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate)
                .HasComment("Ngày mong muốn nhận hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.Deposit).HasComment("Tiền đặt cọc");
            entity.Property(e => e.Discount)
                .HasDefaultValue(0.0)
                .HasComment("Giảm giá");
            entity.Property(e => e.DiscountShop).HasComment("Chiết khấu cho cửa hàng");
            entity.Property(e => e.Distance).HasComment("Quãng đường");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdAction).HasComment("Trạng thái tác nghiệp hiện tại");
            entity.Property(e => e.IdClient).HasComment("Id cha của đơn tách");
            entity.Property(e => e.IdOrderGroup)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nhóm đơn");
            entity.Property(e => e.IdPromotion).HasComment("Theo chương trình km nào");
            entity.Property(e => e.IdRef).HasComment("");
            entity.Property(e => e.IdShop).HasComment("Của hàng");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái giao hàng hiện tại");
            entity.Property(e => e.IdUserRef).HasComment("UserId CTV");
            entity.Property(e => e.IsCustomerConfirmed).HasComment("Khách hàng tự chốt qua link");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsInvoice).HasDefaultValue(false);
            entity.Property(e => e.IsInvoiced).HasDefaultValue(false);
            entity.Property(e => e.IsManual)
                .HasDefaultValue(false)
                .HasComment("Lên đơn trên dapfood");
            entity.Property(e => e.IsPaid)
                .HasDefaultValue(false)
                .HasComment("Đã trừ tiền đơn trả trước của ctv");
            entity.Property(e => e.IsPaidReward)
                .HasDefaultValue(false)
                .HasComment("Đã trả thưởng cho ctv");
            entity.Property(e => e.IsPreOrder)
                .HasDefaultValue(false)
                .HasComment("Đơn đặt hàng trước");
            entity.Property(e => e.IsPrepay)
                .HasDefaultValue(false)
                .HasComment("Thanh toán luôn");
            entity.Property(e => e.IsRated).HasDefaultValue(false);
            entity.Property(e => e.IsVerified)
                .HasDefaultValue(false)
                .HasComment("Đơn chốt");
            entity.Property(e => e.LogisticId).HasComment("Trạng thái giao hàng hiện tại");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.Note).HasMaxLength(4000);
            entity.Property(e => e.OrderType).HasDefaultValue(1);
            entity.Property(e => e.PayStatus)
                .HasDefaultValue(0)
                .HasComment("1: Thành công, 2: Hủy, 0: Nothing");
            entity.Property(e => e.PaymentChannel)
                .HasDefaultValue(0)
                .HasComment("Kênh thanh toán: 1 điểm dapfood, 2 ngân lượng");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Points).HasComment("Điểm thưởng tích lũy: tiền hàng * phí hoa hồng trả của sàn");
            entity.Property(e => e.PrepayReward)
                .HasDefaultValue(0.0)
                .HasComment("Thưởng từ đơn trả tiền trước");
            entity.Property(e => e.ProductReward)
                .HasDefaultValue(0.0)
                .HasComment("Thưởng từ sản phẩm");
            entity.Property(e => e.PromotionReward).HasComment("Thưởng chương trình");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .HasComment("Trạng thái bán hàng");
            entity.Property(e => e.Ship).HasComment("Phí vận chuyển");
            entity.Property(e => e.ShipRoot)
                .HasDefaultValue(0.0)
                .HasComment("Phí vận chuyển");
            entity.Property(e => e.ShipStatus)
                .HasMaxLength(500)
                .HasComment("Mã đơn giao vận");
            entity.Property(e => e.SystemFee)
                .HasDefaultValue(0.0)
                .HasComment("Phí dapfood");
            entity.Property(e => e.Total).HasComment("Tổng tiền hàng");
            entity.Property(e => e.TotalBill).HasComment("Tổng tiền đơn");
            entity.Property(e => e.TotalGift)
                .HasDefaultValue(0.0)
                .HasComment("Tổng quà tặng");
            entity.Property(e => e.TotalReward)
                .HasDefaultValue(0.0)
                .HasComment("Tổng tiền thưởng");
            entity.Property(e => e.TotalRewardReferral)
                .HasDefaultValue(0.0)
                .HasComment("Tổng tiền thưởng giới thiệu");
            entity.Property(e => e.TranportId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Trạng thái giao hàng hiện tại");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserIdReferencer).HasComment("Người giới thiệu");
            entity.Property(e => e.UtmSource)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Voucher)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdActionNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdAction)
                .HasConstraintName("FK_Orders_Actions");

            entity.HasOne(d => d.IdDistrictNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdDistrict)
                .HasConstraintName("FK_Orders_Districts");

            entity.HasOne(d => d.IdInvoiceNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdInvoice)
                .HasConstraintName("FK_Orders_Invoices");

            entity.HasOne(d => d.IdPromotionNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdPromotion)
                .HasConstraintName("FK_Orders_Promotions");

            entity.HasOne(d => d.IdPromotionRewardNavigation).WithMany(p => p.OrdersIdPromotionRewardNavigation)
                .HasForeignKey(d => d.IdPromotionReward)
                .HasConstraintName("FK_Orders_PromotionUsers2");

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.OrdersIdPromotionUserNavigation)
                .HasForeignKey(d => d.IdPromotionUser)
                .HasConstraintName("FK_Orders_PromotionUsers");

            entity.HasOne(d => d.IdPromotionUserShipNavigation).WithMany(p => p.OrdersIdPromotionUserShipNavigation)
                .HasForeignKey(d => d.IdPromotionUserShip)
                .HasConstraintName("FK_Orders_PromotionUsers1");

            entity.HasOne(d => d.IdProvinceNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdProvince)
                .HasConstraintName("FK_Orders_Provinces");

            entity.HasOne(d => d.IdShopNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdShop)
                .HasConstraintName("FK_Orders_Shops");

            entity.HasOne(d => d.IdStatusNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdStatus)
                .HasConstraintName("FK_Orders_Status");

            entity.HasOne(d => d.IdUserAddressNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdUserAddress)
                .HasConstraintName("FK_Orders_UserAddress");

            entity.HasOne(d => d.IdWardNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.IdWard)
                .HasConstraintName("FK_Orders_Wards2");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Users");
        });

        modelBuilder.Entity<PartLessions>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayPart).HasComment("thứ tự hiển thị học phần");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.TotalLesson).HasComment("Tổng số bài giảng");
            entity.Property(e => e.TotalTimeVideo).HasComment("Tổng thời gian của học phần");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.PartLessions)
                .HasForeignKey(d => d.IdLession)
                .HasConstraintName("FK_PartLessions_Lessons");
        });

        modelBuilder.Entity<Pathologies>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Bệnh học"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Image).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdPathologyCategoryNavigation).WithMany(p => p.Pathologies)
                .HasForeignKey(d => d.IdPathologyCategory)
                .HasConstraintName("FK_Pathologies_PathologyCategories");
        });

        modelBuilder.Entity<PathologyCategories>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Permissions>(entity =>
        {
            entity.Property(e => e.Controller).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Permission).HasMaxLength(200);
            entity.Property(e => e.Service).HasMaxLength(100);
        });

        modelBuilder.Entity<Points>(entity =>
        {
            entity.Property(e => e.AccountIdentify).HasMaxLength(100);
            entity.Property(e => e.AccountType).HasComment("Hình thức rút. -Rút về thẻ ATM nhận giá trị 2 -Rút về tài khoản ngân hàng nhận giá trị 3");
            entity.Property(e => e.BankCode)
                .HasMaxLength(50)
                .HasComment("Mã ngân hàng");
            entity.Property(e => e.BankNote).HasMaxLength(50);
            entity.Property(e => e.CardFullname)
                .HasMaxLength(100)
                .HasComment("tên chủ thẻ k đc để trống");
            entity.Property(e => e.CardNumber)
                .HasMaxLength(100)
                .HasComment("max 20 kí tự");
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasComment("Nội dung chuyển khoản random");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Deal).HasComment("Số tiền giao dịch");
            entity.Property(e => e.DealType)
                .HasDefaultValue(0)
                .HasComment("Loại giao dịch: Nạp tiền và rút tiền");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorCode)
                .HasMaxLength(50)
                .HasComment("Mã lỗi");
            entity.Property(e => e.ErrorText)
                .HasDefaultValue(0)
                .HasComment("Ngân lượng: Giao dịch thanh toán có bị lỗi hay không. $error_text == \"\" là không có lỗi. Nếu có lỗi, mô tả lỗi được chứa trong $error_text");
            entity.Property(e => e.Fee).HasDefaultValue(0);
            entity.Property(e => e.IdBank).HasComment("Id ngân hàng");
            entity.Property(e => e.IdRef).HasComment("Lưu lại id của bản ghi trước khi giao dịch không thành công");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(false)
                .HasComment("Tiền khả dụng (nghĩa là không đóng băng)");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note).HasMaxLength(1000);
            entity.Property(e => e.Payment)
                .HasDefaultValue(0)
                .HasComment("Hình thức thanh toán: 1 Ngân lượng, 2 thủ công");
            entity.Property(e => e.PaymentId)
                .HasDefaultValue(0)
                .HasComment("Ngân lượng: Mã giao dịch tại NgânLượng.vn");
            entity.Property(e => e.PaymentType)
                .HasDefaultValue(0)
                .HasComment("Ngân lượng: 1 thanh toán luôn, 2 tạm giữ");
            entity.Property(e => e.RefCode)
                .HasMaxLength(500)
                .HasComment("Mã tham chiếu do website bán hàng sinh ra ( nhỏ hơn 500 kí tự)");
            entity.Property(e => e.SecureCode)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Ngân lượng: Chuỗi mã hóa");
            entity.Property(e => e.Status).HasComment("0: Chưa xử lý; 1: Thành công; 2: Đang xử lý; 3: Hủy; 4: Lỗi");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasComment("Mã giao dịch rút tiền tại NganLuong.vn");
            entity.Property(e => e.TransactionInfo)
                .HasMaxLength(255)
                .HasDefaultValueSql("((0))")
                .HasComment("Ngân lượng: Thông tin về giao dịch, Giá trị do website gửi sang");
            entity.Property(e => e.TransactionStatus)
                .HasMaxLength(200)
                .HasComment("00 - Đã thành công; 01 - Đang chờ xử lý; 02 - Không thành công");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.DealTypeNavigation).WithMany(p => p.Points)
                .HasForeignKey(d => d.DealType)
                .HasConstraintName("FK_Points_DealTypes");

            entity.HasOne(d => d.IdBankNavigation).WithMany(p => p.Points)
                .HasForeignKey(d => d.IdBank)
                .HasConstraintName("FK_Points_Banks");
        });

        modelBuilder.Entity<Popups>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.ObjectId).HasComment("Idproduct, idorder,...");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductCategories>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CategoryProduct");
        });

        modelBuilder.Entity<ProductCombos>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdProductCombo).HasComment("Sản phẩm con của combo");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsGift).HasComment("1. Hàng bán, 2. Quà tặng");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.ProductCombos)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductCombos_Products");
        });

        modelBuilder.Entity<ProductLogs>(entity =>
        {
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsAdminApprove).HasDefaultValue(false);
            entity.Property(e => e.IsSoldOut).HasComment("Hết hàng");
            entity.Property(e => e.MessageApprove)
                .HasMaxLength(300)
                .HasComment("Tin nhắn duyệt");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Reward).HasDefaultValue(0.0);
            entity.Property(e => e.StatusApprove)
                .HasDefaultValue(0)
                .HasComment("1: Gửi duyệt, 2 Đã duyệt, 3 Không Duyệt");
        });

        modelBuilder.Entity<ProductProvinces>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.ProductProvinces)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_ProductProvinces_Products");

            entity.HasOne(d => d.IdProvinceNavigation).WithMany(p => p.ProductProvinces)
                .HasForeignKey(d => d.IdProvince)
                .HasConstraintName("FK_ProductProvinces_Provinces");
        });

        modelBuilder.Entity<ProductRegs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SourceRegs");

            entity.Property(e => e.CountSales).HasComment("Số lượng bán");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsFavorite)
                .HasDefaultValue(false)
                .HasComment("Yêu thích");
            entity.Property(e => e.LinkVideo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Linkvideo");
            entity.Property(e => e.Rename).HasMaxLength(500);
            entity.Property(e => e.Reward).HasComment("Tổng thưởng");
            entity.Property(e => e.Sort).HasComment("Thứ tự");
            entity.Property(e => e.TotalClick)
                .HasDefaultValue(0)
                .HasComment("Tổng số click");
            entity.Property(e => e.TotalSales)
                .HasDefaultValue(0.0)
                .HasComment("Tổng doanh số");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Url)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Link");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.ProductRegs)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_ProductRegs_Products");

            entity.HasOne(d => d.User).WithMany(p => p.ProductRegs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductRegs_Users");
        });

        modelBuilder.Entity<Products>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PZ_SanPham");

            entity.Property(e => e.BusinessLicense)
                .HasMaxLength(300)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả");
            entity.Property(e => e.DescriptionSeo)
                .HasMaxLength(250)
                .HasColumnName("DescriptionSEO");
            entity.Property(e => e.Detail).HasComment("Mô tả");
            entity.Property(e => e.IdCountry).HasComment("Xuất xứ");
            entity.Property(e => e.IdSupplier).HasComment("Nhà Cung cấp");
            entity.Property(e => e.IdSyn)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasComment("Mã sản phẩm bên thứ 3 (cukcuk)");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsAdminApprove).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsGtmt)
                .HasDefaultValue(false)
                .HasComment("Sản phẩm có sử dụng cho GTMT hay ko?");
            entity.Property(e => e.IsPreOrder)
                .HasDefaultValue(false)
                .HasComment("Có cho phép đặt hàng trước hay không?");
            entity.Property(e => e.IsSoldOut).HasComment("Hết hàng");
            entity.Property(e => e.ListImages)
                .HasMaxLength(500)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.MessageApprove)
                .HasMaxLength(300)
                .HasComment("Tin nhắn duyệt");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.OrderDate)
                .HasComment("Ngày trạng thay đổi trạng thái đơn hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.Point)
                .HasDefaultValue(0)
                .HasComment("5* => 5 điểm, 4* => 3 điểm, 3* => 0 điểm, 2* => 5 điểm, 1* => 10 điểm");
            entity.Property(e => e.PointClient).HasComment("Điểm thưởng theo sản phẩm của doanh nghiệp");
            entity.Property(e => e.PolicyCtv).HasComment("Chính sách cho ctv");
            entity.Property(e => e.PreOrderDate)
                .HasDefaultValue(0)
                .HasComment("Ngày bắt đầu mong muốn nhận hàng");
            entity.Property(e => e.Price).HasComment("Giá bán lẻ");
            entity.Property(e => e.PriceWholesale).HasComment("giá bán sỉ");
            entity.Property(e => e.Rank)
                .HasDefaultValue(0)
                .HasComment("Cho điểm để xếp top 1 hay 2");
            entity.Property(e => e.Rate)
                .HasDefaultValue(0)
                .HasComment("Đánh giá để sắp xếp sản phẩm");
            entity.Property(e => e.Reward)
                .HasDefaultValue(0.0)
                .HasComment("Hoa hồng");
            entity.Property(e => e.ShipTimeAvg)
                .HasDefaultValue(0.0)
                .HasComment("Thời gian giao hàng trung bình");
            entity.Property(e => e.ShowUserType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Hiển thị theo loại khách hàng");
            entity.Property(e => e.StatusApprove)
                .HasDefaultValue(0)
                .HasComment("1: Gửi duyệt, 2 Đã duyệt, 3 Không Duyệt");
            entity.Property(e => e.TitleSeo)
                .HasMaxLength(250)
                .HasColumnName("TitleSEO");
            entity.Property(e => e.Type)
                .HasDefaultValue((short)1)
                .HasComment("Loại sản phẩm 1 or null:  Sản phẩm bán hàng, 2: Combo, 3: Quà tặng");
            entity.Property(e => e.Unit).HasMaxLength(36);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Video1)
                .HasMaxLength(300)
                .HasComment("Chính sách cho ctv");
            entity.Property(e => e.Video2)
                .HasMaxLength(300)
                .HasComment("Chính sách cho ctv");
            entity.Property(e => e.VideoTitle1)
                .HasMaxLength(300)
                .HasComment("Chính sách cho ctv");
            entity.Property(e => e.VideoTitle2)
                .HasMaxLength(300)
                .HasComment("Chính sách cho ctv");

            entity.HasOne(d => d.IdBrandNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.IdBrand)
                .HasConstraintName("FK_Products_Brands");

            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.IdCategory)
                .HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.IdClient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Clients");

            entity.HasOne(d => d.IdCountryNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.IdCountry)
                .HasConstraintName("FK_Products_Countries");

            entity.HasOne(d => d.IdSupplierNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.IdSupplier)
                .HasConstraintName("FK_Products_Suppliers");
        });

        modelBuilder.Entity<PromotionNotIns>(entity =>
        {
            entity.HasOne(d => d.IdPromotionNavigation).WithMany(p => p.PromotionNotIns)
                .HasForeignKey(d => d.IdPromotion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionNotIns_Promotions");
        });

        modelBuilder.Entity<PromotionProducts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Promotion_Procuct");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Mode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.PromotionProducts)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionProduct_Products");

            entity.HasOne(d => d.IdPromotionNavigation).WithMany(p => p.PromotionProducts)
                .HasForeignKey(d => d.IdPromotion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotion_Procuct_Promotion");
        });

        modelBuilder.Entity<PromotionSaleNotIns>(entity =>
        {
            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.PromotionSaleNotIns)
                .HasForeignKey(d => d.IdPromotionSale)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionSaleNotIns_PromotionSales");
        });

        modelBuilder.Entity<PromotionSaleProducts>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Mode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.PromotionSaleProducts)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionSaleProducts_Products");

            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.PromotionSaleProducts)
                .HasForeignKey(d => d.IdPromotionSale)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionSaleProducts_PromotionSales");
        });

        modelBuilder.Entity<PromotionSales>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate)
                .HasComment("Ngày kết thúc")
                .HasColumnType("datetime");
            entity.Property(e => e.EndDateReward).HasColumnType("datetime");
            entity.Property(e => e.FromValue).HasComment("Giá trị đơn từ");
            entity.Property(e => e.IdCategory).HasComment("Danh mục sản phẩm được khuyến mãi");
            entity.Property(e => e.IdCategory1).HasComment("Danh mục cấp 2 khuyến mãi");
            entity.Property(e => e.IdLevel).HasComment("Cấp bậc tài khoản");
            entity.Property(e => e.IdSupplier).HasComment("Mã nhà cung cấp được khuyến mãi");
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.ImageWeb).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsFirstOrderUser).HasComment("Người dùng tạo đơn mới");
            entity.Property(e => e.IsGtmt)
                .HasDefaultValue(false)
                .HasComment("Có sử dụng cho Gtmt ko?");
            entity.Property(e => e.IsReward)
                .HasDefaultValue(false)
                .HasComment("Nếu True thì: Tiền giảm của đơn sẽ thành tiền thưởng của CTV");
            entity.Property(e => e.MaxValue).HasComment("Tối đa");
            entity.Property(e => e.Mode).HasComment("1 = % , 2 = điểm");
            entity.Property(e => e.Name).HasMaxLength(300);
            entity.Property(e => e.NumberPerUser).HasComment("Số lần mỗi user được km");
            entity.Property(e => e.NumberProductPerUser).HasComment("Số sản phẩm mỗi user được km");
            entity.Property(e => e.Quantity).HasComment("Số lượng khuyến mãi");
            entity.Property(e => e.Sale).HasComment("value khuyến mãi");
            entity.Property(e => e.StartDate)
                .HasComment("Ngày bắt đầu")
                .HasColumnType("datetime");
            entity.Property(e => e.StartDateReward).HasColumnType("datetime");
            entity.Property(e => e.ToValue).HasComment("đến");
            entity.Property(e => e.Type).HasComment("Hình thức khuyến mãi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PromotionSalesGiftProducts>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.PromotionSalesGiftProducts)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_PromotionSalesGiftProducts_Products");

            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.PromotionSalesGiftProducts)
                .HasForeignKey(d => d.IdPromotionSale)
                .HasConstraintName("FK_PromotionSalesGiftProducts_PromotionSales");
        });

        modelBuilder.Entity<PromotionSalesGiftcode>(entity =>
        {
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderSaleNavigation).WithMany(p => p.PromotionSalesGiftcode)
                .HasForeignKey(d => d.IdOrderSale)
                .HasConstraintName("FK_PromotionSalesGiftcode_SaleOrders");

            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.PromotionSalesGiftcode)
                .HasForeignKey(d => d.IdPromotionSale)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionSalesGiftcode_PromotionSales");
        });

        modelBuilder.Entity<PromotionUserLevels>(entity =>
        {
            entity.Property(e => e.IsPercent).HasDefaultValue(true);
            entity.Property(e => e.Name).HasMaxLength(250);

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.PromotionUserLevels)
                .HasForeignKey(d => d.IdPromotionUser)
                .HasConstraintName("FK_PromotionUserLevels_PromotionUsers");
        });

        modelBuilder.Entity<PromotionUserNotIns>(entity =>
        {
            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.PromotionUserNotIns)
                .HasForeignKey(d => d.IdPromotionUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionUserNotIns_Promotions");
        });

        modelBuilder.Entity<PromotionUserProducts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Promotion_User_Procuct");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.PromotionUserProducts)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionUserProduct_Products");

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.PromotionUserProducts)
                .HasForeignKey(d => d.IdPromotionUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionUser_Product_Promotion");
        });

        modelBuilder.Entity<PromotionUsers>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate)
                .HasComment("Ngày kết thúc")
                .HasColumnType("datetime");
            entity.Property(e => e.EndDateReward).HasColumnType("datetime");
            entity.Property(e => e.FromValue).HasComment("Giá trị đơn từ");
            entity.Property(e => e.IdCategory).HasComment("Danh mục sản phẩm được khuyến mãi");
            entity.Property(e => e.IdCategory1).HasComment("Danh mục cấp 2 khuyến mãi");
            entity.Property(e => e.IdLevel).HasComment("Cấp bậc tài khoản");
            entity.Property(e => e.IdSupplier).HasComment("Mã nhà cung cấp được khuyến mãi");
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.ImageWeb).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsFirstOrderUser).HasComment("Người dùng tạo đơn mới");
            entity.Property(e => e.IsGtmt)
                .HasDefaultValue(false)
                .HasComment("Có sử dụng cho Gtmt ko?");
            entity.Property(e => e.IsReward)
                .HasDefaultValue(false)
                .HasComment("Nếu True thì: Tiền giảm của đơn sẽ thành tiền thưởng của CTV");
            entity.Property(e => e.MaxValue).HasComment("Tối đa");
            entity.Property(e => e.Mode).HasComment("1 = % , 2 = điểm");
            entity.Property(e => e.Name).HasMaxLength(300);
            entity.Property(e => e.NumberPerUser).HasComment("Số lần mỗi user được km");
            entity.Property(e => e.NumberProductPerUser).HasComment("Số sản phẩm mỗi user được km");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Quantity).HasComment("Số lượng khuyến mãi");
            entity.Property(e => e.Sale).HasComment("value khuyến mãi");
            entity.Property(e => e.ShowUserType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Hiển thị cho loại khách");
            entity.Property(e => e.StartDate)
                .HasComment("Ngày bắt đầu")
                .HasColumnType("datetime");
            entity.Property(e => e.StartDateReward).HasColumnType("datetime");
            entity.Property(e => e.ToValue).HasComment("đến");
            entity.Property(e => e.Type).HasComment("Hình thức khuyến mãi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PromotionUsersGiftProducts>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.PromotionUsersGiftProducts)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_PromotionUsersGiftProducts_Products");

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.PromotionUsersGiftProducts)
                .HasForeignKey(d => d.IdPromotionUser)
                .HasConstraintName("FK_PromotionUsersGiftProducts_PromotionUsers");
        });

        modelBuilder.Entity<PromotionUsersGiftcode>(entity =>
        {
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.PromotionUsersGiftcode)
                .HasForeignKey(d => d.IdOrder)
                .HasConstraintName("FK_PromotionUsersGiftcode_Orders");

            entity.HasOne(d => d.IdPromotionUserNavigation).WithMany(p => p.PromotionUsersGiftcode)
                .HasForeignKey(d => d.IdPromotionUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionUsersGiftcode_PromotionUsers");
        });

        modelBuilder.Entity<Promotions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Promotion");

            entity.Property(e => e.Code)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate)
                .HasComment("Ngày kết thúc")
                .HasColumnType("datetime");
            entity.Property(e => e.FromValue).HasComment("Giá trị đơn từ");
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.MaxValue).HasComment("Tối đa");
            entity.Property(e => e.Mode).HasComment("1 = % , 2 = điểm");
            entity.Property(e => e.Name).HasMaxLength(300);
            entity.Property(e => e.NumberPerUser).HasComment("Số lần mỗi user được km");
            entity.Property(e => e.NumberProductPerUser).HasComment("Số sản phẩm mỗi user được km");
            entity.Property(e => e.Quantity).HasComment("Số lượng khuyến mãi");
            entity.Property(e => e.Sale).HasComment("value khuyến mãi");
            entity.Property(e => e.StartDate)
                .HasComment("Ngày bắt đầu")
                .HasColumnType("datetime");
            entity.Property(e => e.ToValue).HasComment("đến");
            entity.Property(e => e.Type).HasComment("Hình thức khuyến mãi");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Provinces>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DM_TinhT__3214EC0768487DD7");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<QuestionLessions>(entity =>
        {
            entity.Property(e => e.ContentQuestion)
                .HasMaxLength(500)
                .HasComment("nội dung câu hỏi, trả lời");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdLession).HasComment("Bài giảng");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Sort).HasComment("Sắp xếp thứ tự");
            entity.Property(e => e.Summary)
                .HasMaxLength(100)
                .HasComment("Tóm tắt");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdLessionNavigation).WithMany(p => p.QuestionLessions)
                .HasForeignKey(d => d.IdLession)
                .HasConstraintName("FK_QuestionLessions_Lessons1");
        });

        modelBuilder.Entity<SaleActions>(entity =>
        {
            entity.Property(e => e.Actions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Roles).HasMaxLength(200);
            entity.Property(e => e.StatusActions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SaleOrderActions>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdSaleAction).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IdSaleOrder).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái đơn hàng tương ứng");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdSaleActionNavigation).WithMany(p => p.SaleOrderActions)
                .HasForeignKey(d => d.IdSaleAction)
                .HasConstraintName("FK_SaleOrderActions_SaleActions");

            entity.HasOne(d => d.IdSaleOrderNavigation).WithMany(p => p.SaleOrderActions)
                .HasForeignKey(d => d.IdSaleOrder)
                .HasConstraintName("FK_SaleOrderActions_SaleOrders");
        });

        modelBuilder.Entity<SaleOrderDetails>(entity =>
        {
            entity.Property(e => e.Comment).HasMaxLength(1000);
            entity.Property(e => e.CommentImages).HasMaxLength(1000);
            entity.Property(e => e.DateRating).HasColumnType("datetime");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái đơn hàng hiện tại");
            entity.Property(e => e.Level).HasComment("Level tại thời diểm lên đơn của ctv");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasComment("Ghi chú");
            entity.Property(e => e.Points).HasComment("Tích lũy sản phẩm");
            entity.Property(e => e.PriceWholesale).HasComment("Giá bán tại thời điểm");
            entity.Property(e => e.Reward).HasComment("Tiền thưởng");
            entity.Property(e => e.RewardReferencer).HasComment("Thưởng người giới thiệu");
            entity.Property(e => e.TotalSale).HasComment("Doanh số tại thời điểm lên đơn của CTV");
            entity.Property(e => e.UserRating).HasMaxLength(50);

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.SaleOrderDetails)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleOrderDetails_Products");

            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.SaleOrderDetails)
                .HasForeignKey(d => d.IdPromotionSale)
                .HasConstraintName("FK_SaleOrderDetails_PromotionSales");

            entity.HasOne(d => d.IdSaleOrderNavigation).WithMany(p => p.SaleOrderDetails)
                .HasForeignKey(d => d.IdSaleOrder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleOrderDetails_SaleOrders1");
        });

        modelBuilder.Entity<SaleOrderStatus>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdSaleOrder).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IdSaleStatus).HasComment("Trạng thái giao hàng");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdSaleOrderNavigation).WithMany(p => p.SaleOrderStatus)
                .HasForeignKey(d => d.IdSaleOrder)
                .HasConstraintName("FK_SaleOrderStatus_SaleOrders");

            entity.HasOne(d => d.IdSaleStatusNavigation).WithMany(p => p.SaleOrderStatus)
                .HasForeignKey(d => d.IdSaleStatus)
                .HasConstraintName("FK_SaleOrderStatus_SaleStatus");
        });

        modelBuilder.Entity<SaleOrders>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasComment("Mã đơn");
            entity.Property(e => e.CodeShip)
                .HasMaxLength(50)
                .HasComment("Mã đơn giao vận");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate)
                .HasComment("Ngày mong muốn nhận hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.Deposit).HasComment("Tiền đặt cọc");
            entity.Property(e => e.Discount)
                .HasDefaultValue(0.0)
                .HasComment("Giảm giá");
            entity.Property(e => e.Distance).HasComment("Quãng đường");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdAction).HasComment("Trạng thái tác nghiệp hiện tại");
            entity.Property(e => e.IdClient).HasComment("Id cha của đơn tách");
            entity.Property(e => e.IdDelivery).HasComment("Hình thức giao hàng");
            entity.Property(e => e.IdPromotion).HasComment("Theo chương trình km nào");
            entity.Property(e => e.IdRef).HasComment("");
            entity.Property(e => e.IdStatus).HasComment("Trạng thái giao hàng hiện tại");
            entity.Property(e => e.IdUserSale).HasComment("Đơn ref của sale");
            entity.Property(e => e.IdUserSo)
                .HasComment("Id Sale Admin")
                .HasColumnName("IdUserSO");
            entity.Property(e => e.IdUserSup).HasComment("UserId Sub");
            entity.Property(e => e.IsCustomerConfirmed).HasComment("Khách hàng tự chốt qua link");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsInvoice).HasDefaultValue(false);
            entity.Property(e => e.IsInvoiced).HasDefaultValue(false);
            entity.Property(e => e.IsManual)
                .HasDefaultValue(false)
                .HasComment("Lên đơn trên dapfood");
            entity.Property(e => e.IsPaid)
                .HasDefaultValue(false)
                .HasComment("Đã trừ tiền đơn trả trước của ctv");
            entity.Property(e => e.IsPaidReward)
                .HasDefaultValue(false)
                .HasComment("Đã trả thưởng cho ctv");
            entity.Property(e => e.IsPreOrder)
                .HasDefaultValue(false)
                .HasComment("Đơn đặt hàng trước");
            entity.Property(e => e.IsPrepay)
                .HasDefaultValue(false)
                .HasComment("Thanh toán luôn");
            entity.Property(e => e.IsRated).HasDefaultValue(false);
            entity.Property(e => e.IsVerified)
                .HasDefaultValue(false)
                .HasComment("Đơn chốt");
            entity.Property(e => e.LogisticId).HasComment("Trạng thái giao hàng hiện tại");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.Note).HasMaxLength(4000);
            entity.Property(e => e.PayStatus)
                .HasDefaultValue(0)
                .HasComment("1: Thành công, 2: Hủy, 0: Nothing");
            entity.Property(e => e.PaymentChannel)
                .HasDefaultValue(0)
                .HasComment("Kênh thanh toán: 1 điểm dapfood, 2 ngân lượng");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Points).HasComment("Điểm thưởng tích lũy: tiền hàng * phí hoa hồng trả của sàn");
            entity.Property(e => e.PrepayReward)
                .HasDefaultValue(0.0)
                .HasComment("Thưởng từ đơn trả tiền trước");
            entity.Property(e => e.ProductReward)
                .HasDefaultValue(0.0)
                .HasComment("Thưởng từ sản phẩm");
            entity.Property(e => e.PromotionReward).HasComment("Thưởng chương trình");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .HasComment("Trạng thái bán hàng");
            entity.Property(e => e.SaleOrderType)
                .HasDefaultValue(1)
                .HasComment("1: đơn hàng định mức, 2: đơn đặt hàng sản xuất");
            entity.Property(e => e.Ship).HasComment("Phí vận chuyển");
            entity.Property(e => e.ShipRoot)
                .HasDefaultValue(0.0)
                .HasComment("Phí vận chuyển");
            entity.Property(e => e.ShipStatus)
                .HasMaxLength(500)
                .HasComment("Mã đơn giao vận");
            entity.Property(e => e.SystemFee)
                .HasDefaultValue(0.0)
                .HasComment("Phí dapfood");
            entity.Property(e => e.Total).HasComment("Tổng tiền hàng");
            entity.Property(e => e.TotalBill).HasComment("Tổng tiền đơn");
            entity.Property(e => e.TotalGift)
                .HasDefaultValue(0.0)
                .HasComment("Tổng quà tặng");
            entity.Property(e => e.TotalReward)
                .HasDefaultValue(0.0)
                .HasComment("Tổng tiền thưởng");
            entity.Property(e => e.TotalRewardReferral)
                .HasDefaultValue(0.0)
                .HasComment("Tổng tiền thưởng giới thiệu");
            entity.Property(e => e.TranportId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Trạng thái giao hàng hiện tại");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UtmSource)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Voucher)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdActionNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.IdAction)
                .HasConstraintName("FK_SaleOrders_SaleActions");

            entity.HasOne(d => d.IdDeliveryNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.IdDelivery)
                .HasConstraintName("FK_SaleOrders_DeliveryCategories");

            entity.HasOne(d => d.IdDistrictNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.IdDistrict)
                .HasConstraintName("FK_SaleOrders_Districts");

            entity.HasOne(d => d.IdPromotionRewardNavigation).WithMany(p => p.SaleOrdersIdPromotionRewardNavigation)
                .HasForeignKey(d => d.IdPromotionReward)
                .HasConstraintName("FK_SaleOrders_PromotionSales1");

            entity.HasOne(d => d.IdPromotionSaleNavigation).WithMany(p => p.SaleOrdersIdPromotionSaleNavigation)
                .HasForeignKey(d => d.IdPromotionSale)
                .HasConstraintName("FK_SaleOrders_PromotionSales");

            entity.HasOne(d => d.IdPromotionSaleShipNavigation).WithMany(p => p.SaleOrdersIdPromotionSaleShipNavigation)
                .HasForeignKey(d => d.IdPromotionSaleShip)
                .HasConstraintName("FK_SaleOrders_PromotionSales2");

            entity.HasOne(d => d.IdProvinceNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.IdProvince)
                .HasConstraintName("FK_SaleOrders_Provinces");

            entity.HasOne(d => d.IdStatusNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.IdStatus)
                .HasConstraintName("FK_SaleOrders_SaleStatus");

            entity.HasOne(d => d.IdUserSaleNavigation).WithMany(p => p.SaleOrdersIdUserSaleNavigation)
                .HasForeignKey(d => d.IdUserSale)
                .HasConstraintName("FK_SaleOrders_Users1");

            entity.HasOne(d => d.IdUserSoNavigation).WithMany(p => p.SaleOrdersIdUserSoNavigation)
                .HasForeignKey(d => d.IdUserSo)
                .HasConstraintName("FK_SaleOrders_Users3");

            entity.HasOne(d => d.IdUserSupNavigation).WithMany(p => p.SaleOrdersIdUserSupNavigation)
                .HasForeignKey(d => d.IdUserSup)
                .HasConstraintName("FK_SaleOrders_Users2");

            entity.HasOne(d => d.IdWardNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.IdWard)
                .HasConstraintName("FK_SaleOrders_Wards");

            entity.HasOne(d => d.User).WithMany(p => p.SaleOrdersUser)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleOrders_Users");
        });

        modelBuilder.Entity<SaleStatus>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Actions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.NameRef).HasMaxLength(200);
            entity.Property(e => e.Roles)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Phân quyền cho các role được hiển thị tác nghiệp");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SalesFlows>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdDirectManager).HasComment("");
            entity.Property(e => e.IdEmployee).HasComment("");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdDirectManagerNavigation).WithMany(p => p.SalesFlowsIdDirectManagerNavigation)
                .HasForeignKey(d => d.IdDirectManager)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesFlows_Users1");

            entity.HasOne(d => d.IdEmployeeNavigation).WithMany(p => p.SalesFlowsIdEmployeeNavigation)
                .HasForeignKey(d => d.IdEmployee)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesFlows_Users");
        });

        modelBuilder.Entity<ShipConfigs>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FromValue).HasComment("Giá trị đơn từ");
            entity.Property(e => e.IsActive).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShippingAddress>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Địa chỉ giao hàng khi sale tạo đơn khi Đại lý không có tài khoản"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdSaleNavigation).WithMany(p => p.ShippingAddress)
                .HasForeignKey(d => d.IdSale)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingAddress_Users");
        });

        modelBuilder.Entity<ShippingServices>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Bảng danh sách dịch vụ vận chuyển"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdClient).HasComment("Id doanh nghiệp");
            entity.Property(e => e.Token)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasComment("Token sử dụng dịch vụ vận chuyển");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShopHistories>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(500);
            entity.Property(e => e.IdObject).HasComment("Mã tham chiếu:1 operations");
            entity.Property(e => e.IdShopOperation).HasComment("Loai hành động nhập, xuất,...");
            entity.Property(e => e.OrderCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OrderCodeOffline)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasComment("1: Nhậ; 2: Xuất");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShopInOutDetails>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(4000);
            entity.Property(e => e.TypeObject).HasComment("1: Nhập hàng tự động ;2: Nhập hàng thủ công; 3:chuyển kho ; 4:Xuất hàng thủ công; 5: Xuất hàng bán lẻ ");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.ShopInOutDetails)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_ShopInOutDetails_Products");

            entity.HasOne(d => d.IdShopInOutNavigation).WithMany(p => p.ShopInOutDetails)
                .HasForeignKey(d => d.IdShopInOut)
                .HasConstraintName("FK_ShopInOutDetails_ShopInOuts");

            entity.HasOne(d => d.IdShopOperationNavigation).WithMany(p => p.ShopInOutDetails)
                .HasForeignKey(d => d.IdShopOperation)
                .HasConstraintName("FK_ShopInOutDetails_ShopOperations");
        });

        modelBuilder.Entity<ShopInOuts>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateRequest)
                .HasComment("Ngày yêu cầu")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(500);
            entity.Property(e => e.IdInOutStatus).HasComment("1: tạo mới, 2: đã chốt, 3 hủy");
            entity.Property(e => e.IdShopAccept).HasComment("Shop xác nhận đã nhận hàng");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.Type).HasComment("1: Nhập hàng; 2: Xuất hàng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdShopOperationNavigation).WithMany(p => p.ShopInOuts)
                .HasForeignKey(d => d.IdShopOperation)
                .HasConstraintName("FK_ShopInOuts_ShopOperations");
        });

        modelBuilder.Entity<ShopOperations>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShopProducts>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActived).HasDefaultValue(true);
            entity.Property(e => e.Quantity).HasComment("Số lượng tồn tại trong kho");
            entity.Property(e => e.QuantityMin).HasComment("Số lượng cảnh báo nhập hàng");
            entity.Property(e => e.Sort).HasComment("Thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.ShopProducts)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_ShopProducts_Products");

            entity.HasOne(d => d.IdShopNavigation).WithMany(p => p.ShopProducts)
                .HasForeignKey(d => d.IdShop)
                .HasConstraintName("FK_ShopProducts_Shops");
        });

        modelBuilder.Entity<Shops>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.Avatar)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Code)
                .HasMaxLength(36)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdDc).HasComment("Thuoc kho nao");
            entity.Property(e => e.IsActived).HasDefaultValue(true);
            entity.Property(e => e.IsDc)
                .HasDefaultValue(true)
                .HasComment("Kho phan phoi");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sort).HasComment("Thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.Shops)
                .HasForeignKey(d => d.IdClient)
                .HasConstraintName("FK_Shops_Clients");

            entity.HasOne(d => d.User).WithMany(p => p.Shops)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Shops_Users");
        });

        modelBuilder.Entity<Statements>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("1: Đơn hàng, 2 Giao dịch tài khoản"));

            entity.Property(e => e.Balance).HasComment("Số dư");
            entity.Property(e => e.BalanceBefore).HasComment("Số dư trước giao dịch");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Deal).HasComment("Số tiền giao dịch");
            entity.Property(e => e.DealType)
                .HasDefaultValue(0)
                .HasComment("Loại giao dịch");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.FromUserId).HasComment("Người chuyển");
            entity.Property(e => e.IdRef).HasComment("Lưu lại id của bản ghi trước khi giao dịch không thành công");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(false)
                .HasComment("Tiền khả dụng (nghĩa là không đóng băng)");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note).HasMaxLength(1000);
            entity.Property(e => e.ObjectId).HasComment("Lưu lại id của đơn");
            entity.Property(e => e.Status).HasComment("0: Chưa xử lý; 1: Thành công; 2: Đang xử lý; 3: Hủy; 4: Lỗi");
            entity.Property(e => e.Type)
                .HasDefaultValue(0)
                .HasComment("Loại giao dịch");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.DealTypeNavigation).WithMany(p => p.Statements)
                .HasForeignKey(d => d.DealType)
                .HasConstraintName("FK_Statements_DealTypes");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_OrderStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Actions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.NameRef).HasMaxLength(200);
            entity.Property(e => e.Roles)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Phân quyền cho các role được hiển thị tác nghiệp");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Suppliers>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Address2).HasMaxLength(500);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(500);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdClient).HasDefaultValue(0);
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StaffInCharge).HasComment("Nhân viên phục trách");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Website)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.IdClient)
                .HasConstraintName("FK_Suppliers_Clients");

            entity.HasOne(d => d.StaffInChargeNavigation).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.StaffInCharge)
                .HasConstraintName("FK_Suppliers_Users");
        });

        modelBuilder.Entity<SysConfigs>(entity =>
        {
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TagMaps>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Type).HasComment("1: tin tức, 2: sản phẩm, 3: bệnh học, 4: Bài giảng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Tag).WithMany(p => p.TagMaps)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("FK_TagMaps_Tags");
        });

        modelBuilder.Entity<Tags>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsShowDetail).HasComment("Hiển thị trong danh sách");
            entity.Property(e => e.IsShowHome).HasComment("Hiển thị danh sách sản phẩm theo mục ở trang chủ AppHome");
            entity.Property(e => e.IsShowList).HasComment("Hiển thị trong danh sách");
            entity.Property(e => e.ShowType).HasComment("Kiểu hiển thị: 1 Chỉ avartar, 2 Full: Avatar + Name + ',' +3: màu sắc: ví dụ: '1,#0e1983'");
            entity.Property(e => e.TagName).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TempTable>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Avatar)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.BankBranch).HasMaxLength(100);
            entity.Property(e => e.BankCardNumber).HasMaxLength(50);
            entity.Property(e => e.BankFullName).HasMaxLength(200);
            entity.Property(e => e.BankNumber).HasMaxLength(50);
            entity.Property(e => e.Cmt).HasMaxLength(20);
            entity.Property(e => e.CmtBackside).HasMaxLength(150);
            entity.Property(e => e.CmtFront).HasMaxLength(150);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Domain).HasMaxLength(150);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FacebookId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FacebookName).HasMaxLength(150);
            entity.Property(e => e.InvoiceCompanyName).HasMaxLength(250);
            entity.Property(e => e.InvoiceEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTaxCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsKol).HasColumnName("IsKOL");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OmiCallDomain)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.OmiCallPassword).HasMaxLength(100);
            entity.Property(e => e.OmiCallRole).HasMaxLength(150);
            entity.Property(e => e.OmiCallSecretKey)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Platform)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Protocol)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferralCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequestCancelDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(150);
            entity.Property(e => e.Version)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Themes>(entity =>
        {
            entity.Property(e => e.Code)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("Tên theme");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TopicCategories>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TopPicCategorys");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TopicUsers>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasComment("0: Chờ duyệt, 1: đã duyệt, 2: hủy, 3 từ chối");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UserAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UserAddress_1");

            entity.Property(e => e.AddShops)
                .HasMaxLength(50)
                .HasComment("Khi thêm cửa hàng update IdShop vào địa chỉ cần thêm");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.UserAddress)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAddress_Users");
        });

        modelBuilder.Entity<UserAddressShopLocations>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdShopNavigation).WithMany(p => p.UserAddressShopLocations)
                .HasForeignKey(d => d.IdShop)
                .HasConstraintName("FK_UserAddressShopLocations_Shops");

            entity.HasOne(d => d.IdUserAddressNavigation).WithMany(p => p.UserAddressShopLocations)
                .HasForeignKey(d => d.IdUserAddress)
                .HasConstraintName("FK_UserAddressShopLocations_UserAddress");

            entity.HasOne(d => d.User).WithMany(p => p.UserAddressShopLocations)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserAddressShopLocations_Users");
        });

        modelBuilder.Entity<UserWebs>(entity =>
        {
            entity.Property(e => e.Background)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Ảnh nền web");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả linkorder");
            entity.Property(e => e.Domain)
                .HasMaxLength(50)
                .HasComment("Tên miền riêng");
            entity.Property(e => e.DomainCreatedDate)
                .HasComment("Ngày đăng ký")
                .HasColumnType("datetime");
            entity.Property(e => e.DomainExpirationDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.DomainStatus).HasComment("2: Đã thành công, 1: đang xử lý");
            entity.Property(e => e.IdTheme)
                .HasDefaultValue(1)
                .HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.SubDomain)
                .HasMaxLength(50)
                .HasComment("Tên miền con theo linkorder");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdThemeNavigation).WithMany(p => p.UserWebs)
                .HasForeignKey(d => d.IdTheme)
                .HasConstraintName("FK_UserWebs_Themes");

            entity.HasOne(d => d.User).WithMany(p => p.UserWebs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserWebs_Users");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_PzUsers");

            entity.Property(e => e.UserId).HasComment("1: CTV, 2: DN,");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Avatar)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Balance).HasDefaultValue(0.0);
            entity.Property(e => e.BankBranch)
                .HasMaxLength(100)
                .HasComment("Chi nhánh");
            entity.Property(e => e.BankCardNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản");
            entity.Property(e => e.BankFullName)
                .HasMaxLength(200)
                .HasComment("Họ và tên");
            entity.Property(e => e.BankNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản");
            entity.Property(e => e.CashInTransit)
                .HasDefaultValue(0.0)
                .HasComment("Tiền đang luôn chuyển");
            entity.Property(e => e.Cmt).HasMaxLength(20);
            entity.Property(e => e.CmtBackside).HasMaxLength(150);
            entity.Property(e => e.CmtFront).HasMaxLength(150);
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Domain)
                .HasMaxLength(150)
                .HasComment("Tên miền");
            entity.Property(e => e.DomainStatus).HasComment("2: Đã thành công, 1: đang xử lý");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FacebookId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FacebookName).HasMaxLength(150);
            entity.Property(e => e.IdBank).HasComment("");
            entity.Property(e => e.IdParent).HasComment("Id cha");
            entity.Property(e => e.IdSupport)
                .HasDefaultValue(0)
                .HasComment("Người hỗ trợ");
            entity.Property(e => e.IdType).HasComment("1.CTV, 2. DN, 3 Shop");
            entity.Property(e => e.InvoiceCompanyName).HasMaxLength(250);
            entity.Property(e => e.InvoiceEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTaxCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsAdminClient)
                .HasDefaultValue(false)
                .HasComment("Là tài khoản doanh nghiệp");
            entity.Property(e => e.IsAgentRegistration)
                .HasDefaultValue(false)
                .HasComment("Người dùng đăng ký làm đại lý");
            entity.Property(e => e.IsApproveCmt)
                .HasDefaultValue(false)
                .HasComment("Duyệt cmt");
            entity.Property(e => e.IsApproved)
                .HasDefaultValue(false)
                .HasComment("Duyệt tài khoản");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsKol).HasColumnName("IsKOL");
            entity.Property(e => e.IsLocked)
                .HasDefaultValue(false)
                .HasComment("Bắt logout đăng nhập lại");
            entity.Property(e => e.IsLogout)
                .HasDefaultValue(false)
                .HasComment("Bắt logout đăng nhập lại");
            entity.Property(e => e.IsOmiCall).HasDefaultValue(false);
            entity.Property(e => e.IsTrial).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OmiCallDomain)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.OmiCallPassword).HasMaxLength(100);
            entity.Property(e => e.OmiCallRole).HasMaxLength(150);
            entity.Property(e => e.OmiCallSecretKey)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Platform)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Protocol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tên miền");
            entity.Property(e => e.ReferralCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Mã giới thiệu");
            entity.Property(e => e.ReferralUserId).HasComment("Người giới thiệu");
            entity.Property(e => e.RequestCancelDate).HasColumnType("datetime");
            entity.Property(e => e.TotalReward)
                .HasDefaultValue(0.0)
                .HasComment("Tổng thưởng");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserIdGuid).HasMaxLength(450);
            entity.Property(e => e.UserName).HasMaxLength(150);
            entity.Property(e => e.Version)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdBankNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.IdBank)
                .HasConstraintName("FK_Users_Banks");

            entity.HasOne(d => d.IdDepartmentNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.IdDepartment)
                .HasConstraintName("FK_Users_Department");

            entity.HasOne(d => d.IdLevelNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.IdLevel)
                .HasConstraintName("FK_Users_Levels");
        });

        modelBuilder.Entity<Wards>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DM_PhuongXa");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdDistrictNavigation).WithMany(p => p.Wards)
                .HasForeignKey(d => d.IdDistrict)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Wards_Districts");

            entity.HasOne(d => d.IdProvinceNavigation).WithMany(p => p.Wards)
                .HasForeignKey(d => d.IdProvince)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Wards_Provinces");
        });

        modelBuilder.Entity<WarehouseHistories>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(500);
            entity.Property(e => e.IdObject).HasComment("Mã tham chiếu:1 operations");
            entity.Property(e => e.IdProductRef).HasComment("Id ps");
            entity.Property(e => e.IdWarehouseOperation).HasComment("Loai hành động nhập, xuất,...");
            entity.Property(e => e.OrderCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OrderCodeOffline)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TypeObject).HasComment("1: Nhập hàng tự động ;2: Nhập hàng thủ công; 3:chuyển kho ; 4:Xuất hàng thủ công; 5: Xuất hàng bán lẻ; 6: Hủy xuất hàng bán lẻ");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdOrderNavigation).WithMany(p => p.WarehouseHistories)
                .HasForeignKey(d => d.IdOrder)
                .HasConstraintName("FK_WarehouseHistories_SaleOrders");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.WarehouseHistories)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_WarehouseHistories_Products");

            entity.HasOne(d => d.IdWarehouseNavigation).WithMany(p => p.WarehouseHistories)
                .HasForeignKey(d => d.IdWarehouse)
                .HasConstraintName("FK_WarehouseHistories_Warehouses");
        });

        modelBuilder.Entity<WarehouseInOutDetails>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DescriptionProduct)
                .HasMaxLength(200)
                .HasComment("mô tả khi nhập");
            entity.Property(e => e.Price).HasComment("Giá nhập tại thời điểm");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.WarehouseInOutDetails)
                .HasForeignKey(d => d.IdProduct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInOutDetails_Products");

            entity.HasOne(d => d.IdWarehouseInOutNavigation).WithMany(p => p.WarehouseInOutDetails)
                .HasForeignKey(d => d.IdWarehouseInOut)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInOutDetails_WarehouseInOuts");
        });

        modelBuilder.Entity<WarehouseInOutStatus>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Actions)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Tác nghiệp trước");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Roles)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Phân quyền cho các role được hiển thị tác nghiệp");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WarehouseInOutTemps>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(4000);
            entity.Property(e => e.TypeObject).HasComment("1: Nhập hàng tự động ;2: Nhập hàng thủ công; 3:chuyển kho ; 4:Xuất hàng thủ công; 5: Xuất hàng bán lẻ ");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WarehouseInOuts>(entity =>
        {
            entity.Property(e => e.BankTransfer).HasComment("số tiền thanh toán chuyển khoản");
            entity.Property(e => e.Cash).HasComment("số tiền mặt thanh toán cho đơn hàng");
            entity.Property(e => e.Code)
                .HasMaxLength(57)
                .IsUnicode(false)
                .HasComputedColumnSql("([PreFix]+right('0000000'+CONVERT([varchar](7),[Id]),(7)))", true);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Descriptions).HasMaxLength(500);
            entity.Property(e => e.Discount).HasComment("mức chiết khấu cho phiếu");
            entity.Property(e => e.ExpectedDate)
                .HasComment("ngày dự kiến đối với loại phiếu là kế hoạch")
                .HasColumnType("datetime");
            entity.Property(e => e.IdSupplier).HasComment("Nhà cung cấp");
            entity.Property(e => e.IdWarehouseInOutStatus).HasComment("Trạng thái của phiếu nhập xuất");
            entity.Property(e => e.IdWarehouseOperation).HasComment("Loai hành động nhập, xuất,...");
            entity.Property(e => e.InputDate)
                .HasComment("Ngày nhập kho")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.PaymentDate)
                .HasComment("ngày thanh toán phiếu")
                .HasColumnType("datetime");
            entity.Property(e => e.PreFix)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tiền tố đầu tiên trong mã phiếu");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.WarehouseInOuts)
                .HasForeignKey(d => d.IdClient)
                .HasConstraintName("FK_WarehouseInOuts_Clients");

            entity.HasOne(d => d.IdWarehouseNavigation).WithMany(p => p.WarehouseInOuts)
                .HasForeignKey(d => d.IdWarehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInOuts_Warehouses");

            entity.HasOne(d => d.IdWarehouseInOutStatusNavigation).WithMany(p => p.WarehouseInOuts)
                .HasForeignKey(d => d.IdWarehouseInOutStatus)
                .HasConstraintName("FK_WarehouseInOuts_WarehouseInOutStatus");

            entity.HasOne(d => d.IdWarehouseOperationNavigation).WithMany(p => p.WarehouseInOuts)
                .HasForeignKey(d => d.IdWarehouseOperation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInOuts_WarehouseOperations");
        });

        modelBuilder.Entity<WarehouseOperations>(entity =>
        {
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WarehouseProducts>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Quantity)
                .HasDefaultValue(0)
                .HasComment("Số lượng tồn tại trong kho");
            entity.Property(e => e.QuantityCanSell)
                .HasDefaultValue(0)
                .HasComment("Số lượng sản phẩm có thể bán");
            entity.Property(e => e.QuantityMax)
                .HasDefaultValue(1)
                .HasComment("Số lượng tối đa");
            entity.Property(e => e.QuantityMin)
                .HasDefaultValue(1)
                .HasComment("Số lượng số lượng tối thiểu");
            entity.Property(e => e.Sort).HasComment("Thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProductNavigation).WithMany(p => p.WarehouseProducts)
                .HasForeignKey(d => d.IdProduct)
                .HasConstraintName("FK_WarehouseProducts_Products");

            entity.HasOne(d => d.IdWarehouseNavigation).WithMany(p => p.WarehouseProducts)
                .HasForeignKey(d => d.IdWarehouse)
                .HasConstraintName("FK_WarehouseProducts_Warehouses");
        });

        modelBuilder.Entity<Warehouses>(entity =>
        {
            entity.Property(e => e.Address).HasComment("Địa chỉ kho");
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .HasComment("Người liên hệ khi ship nhận hàng");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsNegative)
                .HasDefaultValue(false)
                .HasComment("Cho phép xuất âm, mặc định false");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Số điện thoại liên hệ kho");
            entity.Property(e => e.ProvinceActivities).HasComment("Phạm vi hoạt động của kho hàng theo tỉnh thành");
            entity.Property(e => e.Sort).HasComment("Thứ tự");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdClientNavigation).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.IdClient)
                .HasConstraintName("FK_Warehouses_Clients");
        });

        modelBuilder.Entity<WebhookLogs>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Data).HasComment("Payload");
            entity.Property(e => e.IsApp).HasComment("App hay web");
            entity.Property(e => e.IsRecipient).HasComment("Nhận");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.ObjectId)
                .HasMaxLength(250)
                .HasComment("Id đơn hàng");
            entity.Property(e => e.Result).HasComment("Kết quả respon");
            entity.Property(e => e.Status).HasComment("Trạng thái");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Url).HasMaxLength(350);
        });

        modelBuilder.Entity<WmActions>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WmFeedCommentLikes>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdFeedCommentNavigation).WithMany(p => p.WmFeedCommentLikes)
                .HasForeignKey(d => d.IdFeedComment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmFeedCommentLikes_Comments");

            entity.HasOne(d => d.User).WithMany(p => p.WmFeedCommentLikes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmFeedCommentLikes_Users");
        });

        modelBuilder.Entity<WmLabels>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasComment("");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WmNotes>(entity =>
        {
            entity.Property(e => e.BgColor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Màu nền");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPublic).HasDefaultValue(false);
            entity.Property(e => e.IsStar).HasComment("");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WmParticipants>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("Người tham gia"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdTaskNavigation).WithMany(p => p.WmParticipants)
                .HasForeignKey(d => d.IdTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmParticipants_WmTasks");

            entity.HasOne(d => d.User).WithMany(p => p.WmParticipants)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmParticipants_Users");
        });

        modelBuilder.Entity<WmProjectCols>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WmStatus");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.IdStatus).HasComment("1. ToDo, 2. InProgress, 3. Done");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("Sprint của My task");

            entity.HasOne(d => d.IdProjectNavigation).WithMany(p => p.WmProjectCols)
                .HasForeignKey(d => d.IdProject)
                .HasConstraintName("FK_WmSprintCols_WmProjects");
        });

        modelBuilder.Entity<WmProjectFiles>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdFolderNavigation).WithMany(p => p.WmProjectFiles)
                .HasForeignKey(d => d.IdFolder)
                .HasConstraintName("FK_WmProjectFiles_WmProjectFolders");
        });

        modelBuilder.Entity<WmProjectFolders>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WmProjectMembers>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Role).HasComment("1. Quản lý dự án, 2. Giám sát(Xem và sửa công việc), 3. Theo dõi (Chỉ xem và không được sửa)");

            entity.HasOne(d => d.IdProjectNavigation).WithMany(p => p.WmProjectMembers)
                .HasForeignKey(d => d.IdProject)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmProjectMembers_WmProjects");

            entity.HasOne(d => d.User).WithMany(p => p.WmProjectMembers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmProjectMembers_Users");
        });

        modelBuilder.Entity<WmProjects>(entity =>
        {
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsWorkFolow).HasComment("Có quy trình không ?");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WmShortCutLinks>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Link).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProjectNavigation).WithMany(p => p.WmShortCutLinks)
                .HasForeignKey(d => d.IdProject)
                .HasConstraintName("FK_WmShortCutLinks_WmProjects");
        });

        modelBuilder.Entity<WmSprints>(entity =>
        {
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsActived).HasComment("");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsWorkFolow).HasComment("Có quy trình không ?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdProjectNavigation).WithMany(p => p.WmSprints)
                .HasForeignKey(d => d.IdProject)
                .HasConstraintName("FK_WmSprints_WmProjects");
        });

        modelBuilder.Entity<WmTaskCommentLikes>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IdTaskComment).HasComment("Mã sản phẩm");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("CTV");

            entity.HasOne(d => d.IdTaskCommentNavigation).WithMany(p => p.WmTaskCommentLikes)
                .HasForeignKey(d => d.IdTaskComment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmTaskCommentLikes_WmTaskComments");

            entity.HasOne(d => d.User).WithMany(p => p.WmTaskCommentLikes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmTaskCommentLikes_Users");
        });

        modelBuilder.Entity<WmTaskComments>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Ảnh đại diện");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdTaskNavigation).WithMany(p => p.WmTaskComments)
                .HasForeignKey(d => d.IdTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WmTaskComments_WmTasks");

            entity.HasOne(d => d.User).WithMany(p => p.WmTaskComments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_WmTaskComments_Users");
        });

        modelBuilder.Entity<WmTaskLogs>(entity =>
        {
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .HasComment("Mô tả hành động");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.IdAction).HasComment("Hành động");
            entity.Property(e => e.IdAssignee).HasComment("Người chủ trì");
            entity.Property(e => e.IdStatus).HasComment("1. ToDo, 2. InProgress, 3. Done");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Percent).HasComment("Phần trăm công việc");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdActionNavigation).WithMany(p => p.WmTaskLogs)
                .HasForeignKey(d => d.IdAction)
                .HasConstraintName("FK_WmTaskLogs_WmActions");

            entity.HasOne(d => d.IdTaskNavigation).WithMany(p => p.WmTaskLogs)
                .HasForeignKey(d => d.IdTask)
                .HasConstraintName("FK_WmTaskLogs_WmTasks");
        });

        modelBuilder.Entity<WmTasks>(entity =>
        {
            entity.Property(e => e.Attachment)
                .HasMaxLength(1500)
                .IsUnicode(false)
                .HasComment("File đính kèm");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.IdAssignee).HasComment("Người chủ trì");
            entity.Property(e => e.IdLabel).HasComment("Nhãn/Trang của task");
            entity.Property(e => e.IdStatus).HasComment("1. ToDo, 2. InProgress, 3. Done");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.Participant)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Người tam gia");
            entity.Property(e => e.Percent).HasComment("Phần trăm công việc");
            entity.Property(e => e.Priority)
                .HasDefaultValue(1)
                .HasComment("1 Rất cao, 2 Cao, 3 Bình thường , 4 Thấp, 5 Rất thấp");
            entity.Property(e => e.Sort).HasColumnType("decimal(18, 10)");
            entity.Property(e => e.SortColumn).HasColumnType("decimal(18, 10)");
            entity.Property(e => e.Star).HasComment("Đánh sao");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type).HasComment("1. Task, 2. Bug");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdAssigneeNavigation).WithMany(p => p.WmTasks)
                .HasForeignKey(d => d.IdAssignee)
                .HasConstraintName("FK_WmTasks_Users1");

            entity.HasOne(d => d.IdLabelNavigation).WithMany(p => p.WmTasks)
                .HasForeignKey(d => d.IdLabel)
                .HasConstraintName("FK_WmTasks_WmLabels");

            entity.HasOne(d => d.IdProjectNavigation).WithMany(p => p.WmTasks)
                .HasForeignKey(d => d.IdProject)
                .HasConstraintName("FK_WmTasks_WmProjects");

            entity.HasOne(d => d.IdProjectColNavigation).WithMany(p => p.WmTasks)
                .HasForeignKey(d => d.IdProjectCol)
                .HasConstraintName("FK_WmTasks_WmSprintCols");

            entity.HasOne(d => d.IdSprintNavigation).WithMany(p => p.WmTasks)
                .HasForeignKey(d => d.IdSprint)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_WmTasks_WmSprints");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}